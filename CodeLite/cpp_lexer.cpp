#define yy_create_buffer cl_scope__create_buffer
#define yy_delete_buffer cl_scope__delete_buffer
#define yy_scan_buffer cl_scope__scan_buffer
#define yy_scan_string cl_scope__scan_string
#define yy_scan_bytes cl_scope__scan_bytes
#define yy_flex_debug cl_scope__flex_debug
#define yy_init_buffer cl_scope__init_buffer
#define yy_flush_buffer cl_scope__flush_buffer
#define yy_load_buffer_state cl_scope__load_buffer_state
#define yy_switch_to_buffer cl_scope__switch_to_buffer
#define yyin cl_scope_in
#define yyleng cl_scope_leng
#define yylex cl_scope_lex
#define yyout cl_scope_out
#define yyrestart cl_scope_restart
#define yytext cl_scope_text
#define yylineno cl_scope_lineno
#define yywrap cl_scope_wrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384*5

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
static yyconst short int yy_acclist[652] =
    {   0,
      150,  136,  149,    3,  136,  149,    5,  149,    4,  136,
      149,  100,  136,  149,  136,  149,  102,  136,  149,   95,
      136,  149,  136,  149,   86,  136,  149,   87,  136,  149,
       96,  136,  149,   97,  136,  149,   88,  136,  149,   98,
      136,  149,   94,  136,  149,  101,  136,  149,   81,  136,
      149,   80,  136,  149,  108,  136,  149,  109,  136,  149,
      103,  136,  149,  110,  136,  149,  104,  136,  149,  107,
      136,  149,   79,  136,  149,   79,  136,  149,   92,  136,
      149,   93,  136,  149,  105,  136,  149,   79,  136,  149,
       79,  136,  149,   79,  136,  149,   79,  136,  149,   79,

      136,  149,   79,  136,  149,   79,  136,  149,   79,  136,
      149,   79,  136,  149,   79,  136,  149,   79,  136,  149,
       79,  136,  149,   79,  136,  149,   79,  136,  149,   79,
      136,  149,   79,  136,  149,   79,  136,  149,   79,  136,
      149,   79,  136,  149,   90,  136,  149,  106,  136,  149,
       91,  136,  149,   99,  136,  149,    3,  136,  149,   89,
      136,  149,  144,  149,  137,  149,  142,  144,  149,  138,
      144,  149,  142,  144,  149,  143,  149,  140,  149,  141,
      143,  149,  146,  149,  145,  149,  148,  149,  149,  148,
      149,    3,    5,    4,  122,   85,  127,  123,  132,  125,

      115,  128,  116,  129,  113,  111,   83,    1,    2,  126,
       83,   81,   81,   81,   80,   80,   80,  112,  117,  119,
      121,  120,  118,   79,  133,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   15,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   26,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,  134,  124,    3,   89,  142,  142,  141,  147,
       84,  114,  135,   83,   83,   81,   82,   80,  130,  131,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   24,   79,   79,   79,   79,   79,   79,   79,
       30,   79,   79,   79,   79,   57,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,  142,   83,   82,   82,   79,
        6,   79,   33,   79,   79,    8,   79,   79,    9,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       17,   79,   18,   79,   79,   20,   79,   79,   79,   79,
       79,   79,   25,   79,   79,   79,   79,   79,   31,   79,

       32,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   65,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   47,
       79,   79,   79,  142,   82,   79,    7,   79,   75,   79,
       52,   79,   10,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   19,   79,   21,   79,   79,   61,   79,   23,
       79,   79,   27,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   37,   79,
       79,   79,   79,   79,   79,   79,   79,   74,   79,   79,
       79,   79,   44,   79,   45,   79,   79,   73,   79,   79,

       79,   49,   79,  142,   79,   79,   79,   79,   13,   79,
       54,   79,   79,   79,   16,   79,   79,   22,   79,   55,
       79,   28,   79,   79,   56,   79,   79,   79,   79,   79,
       34,   79,   79,   79,   64,   79,   79,   79,   36,   79,
       38,   79,   51,   79,   39,   79,   40,   79,   41,   79,
       42,   79,   79,   50,   79,   79,   79,   79,   79,   79,
      139,  142,   79,   79,   79,   12,   79,   14,   79,   79,
       79,   79,   29,   79,   79,   79,   79,   79,   63,   79,
       79,   79,   79,   79,   79,   43,   79,   79,   79,   66,
       79,   79,   79,   79,   11,   79,   79,   79,   79,   79,

       58,   79,   59,   79,   60,   79,   79,   35,   79,   79,
       79,   67,   79,   68,   79,   46,   79,   48,   79,   79,
       79,   78,   79,   77,   79,   79,   53,   79,   62,   79,
       79,   79,   76,   79,   71,   79,   79,   79,   79,   79,
       79,   70,   79,   69,   79,   79,   79,   79,   79,   72,
       79
    } ;

static yyconst short int yy_accept[494] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    7,    9,   12,   15,   17,   20,   23,
       25,   28,   31,   34,   37,   40,   43,   46,   49,   52,
       55,   58,   61,   64,   67,   70,   73,   76,   79,   82,
       85,   88,   91,   94,   97,  100,  103,  106,  109,  112,
      115,  118,  121,  124,  127,  130,  133,  136,  139,  142,
      145,  148,  151,  154,  157,  160,  163,  165,  167,  170,
      173,  176,  178,  180,  183,  185,  187,  189,  190,  192,
      193,  194,  194,  195,  196,  196,  197,  197,  198,  199,
      200,  200,  200,  201,  202,  203,  204,  205,  206,  207,

      207,  208,  209,  210,  211,  212,  213,  213,  213,  214,
      215,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  225,  225,  226,  227,  228,  229,  230,  231,
      232,  233,  234,  235,  236,  238,  239,  240,  241,  242,
      243,  244,  245,  246,  247,  248,  250,  251,  252,  253,
      254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
      264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
      274,  275,  276,  277,  278,  279,  280,  281,  281,  281,
      282,  282,  282,  283,  284,  284,  285,  285,  286,  287,
      288,  289,  290,  291,  292,  293,  294,  295,  296,  297,

      298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
      308,  309,  310,  311,  312,  313,  315,  316,  317,  318,
      319,  320,  321,  323,  324,  325,  326,  328,  329,  330,
      331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
      341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
      351,  352,  353,  354,  355,  356,  357,  357,  357,  357,
      357,  357,  358,  359,  360,  361,  363,  365,  366,  368,
      369,  371,  372,  373,  374,  375,  376,  377,  378,  379,
      380,  381,  383,  385,  386,  388,  389,  390,  391,  392,
      393,  395,  396,  397,  398,  399,  401,  403,  404,  405,

      406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
      416,  417,  418,  419,  420,  422,  423,  424,  425,  426,
      427,  428,  429,  430,  432,  433,  434,  435,  435,  435,
      435,  435,  436,  437,  439,  441,  443,  445,  446,  447,
      448,  449,  450,  451,  452,  453,  455,  457,  458,  460,
      462,  463,  465,  466,  467,  468,  469,  470,  471,  472,
      473,  474,  475,  476,  477,  478,  479,  481,  482,  483,
      484,  485,  486,  487,  488,  490,  491,  492,  493,  495,
      497,  498,  500,  501,  502,  504,  505,  506,  507,  508,
      509,  511,  513,  514,  515,  517,  518,  520,  522,  524,

      525,  527,  528,  529,  530,  531,  533,  534,  535,  537,
      538,  539,  541,  543,  545,  547,  549,  551,  553,  554,
      556,  557,  558,  559,  560,  561,  563,  564,  565,  566,
      568,  570,  571,  572,  573,  575,  576,  577,  578,  579,
      581,  582,  583,  584,  585,  586,  588,  589,  590,  592,
      593,  594,  595,  597,  598,  599,  600,  601,  603,  605,
      607,  608,  610,  611,  612,  614,  616,  618,  620,  621,
      622,  624,  626,  627,  629,  631,  632,  633,  635,  637,
      638,  639,  640,  641,  642,  644,  646,  647,  648,  649,
      650,  652,  652

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,    1,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,    1,   31,   31,   31,   31,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   34,
       34,   34,   34,   34,   36,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   34,   52,   53,   54,   55,
       56,   57,   34,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    6,    1,    1,    1,    1,    1,    3,
        6,    6,    6,    7,    7,    7,    7,    1,    3,    1,
        1,    7,    5,    5,    6,    6,    6,    5,    7,    7,
        7,    7,    7,    7,    8,    7,    7,    8,    7,    8,
        7,    8,    7,    8,    7,    7,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[505] =
    {   0,
        0,   69,   79,    0,  149,    0,  857,  856,  217,  218,
      858,  861,  220,  861,  233,  829,  219,  828,  217,  816,
      861,  861,  826,  213,  861,  223,  233,  238,  247,  240,
      828,  861,   45,  824,   46,  861,    0,  234,  861,  861,
      823,  808,  788,  188,  235,  221,  249,  239,  792,  225,
      247,  218,  248,  238,  800,  264,  269,  262,  267,  796,
      861,  261,  861,  861,  333,  861,  861,  861,    0,  861,
      798,  861,  861,    0,  861,  861,  861,  861,  823,  342,
      861,  348,  354,  861,  303,  861,  303,  861,  861,  861,
      293,  308,  861,  861,  861,  861,  861,  827,  861,  822,

      341,  861,  861,  861,  358,  363,  380,  396,  305,  197,
        0,  406,  335,  344,  861,  813,  861,  861,  861,  812,
        0,  353,  800,  861,  792,  777,  780,  788,   18,  791,
      790,  777,  280,  778,  769,  774,  318,  361,  770,  767,
      771,  769,  766,  772,  762,  329,  372,  766,  765,  765,
      755,  770,  769,  358,  771,  384,  758,  182,  365,  762,
      758,  385,  757,  753,  388,  758,  750,  317,  756,  861,
      861,  458,  861,    0,  758,    0,  861,  447,    0,  861,
      427,    0,  861,  861,  454,  861,  457,  460,  861,  439,
      861,  861,  861,  758,  748,  750,  759,  754,  755,  741,

      739,  386,  445,  750,  401,  752,  752,  746,  746,  741,
      737,  734,  742,  745,  744,    0,  739,  729,  737,  737,
      729,  730,    0,  733,  730,  731,    0,  719,  718,  726,
      712,  713,  719,  720,  715,  708,  710,  712,  719,  705,
      703,  703,  705,  702,  704,  712,  711,  710,  700,  704,
      699,  693,  706,  708,  697,  698,  476,  507,  481,  543,
      467,  488,  436,  402,  703,    0,    0,  695,    0,  696,
        0,  686,  684,  692,  681,  686,  680,  675,  684,  684,
      682,    0,    0,  687,    0,  676,  675,  679,  671,  675,
        0,  681,  681,  666,  671,    0,    0,  666,  681,  448,

      669,  679,  674,  669,  660,  658,  659,  656,  668,  463,
      663,  668,  667,  658,    0,  647,  667,  463,  660,  652,
      657,  656,  643,    0,  643,  655,  646,  412,    0,  418,
        0,  861,  647,    0,    0,    0,  657,  643,  644,  649,
      648,  637,  636,  645,  640,    0,    0,  635,    0,    0,
      643,    0,  640,  641,  639,  628,  624,  627,  631,  638,
      620,  634,  633,  617,  629,  620,    0,  628,  613,  624,
      626,  610,  619,  625,    0,  607,  619,  622,    0,    0,
      609,    0,  620,  611,    0,  614,  601,  614,  597,  597,
      610,    0,  599,  598,    0,  601,    0,    0,    0,  598,

        0,  597,  583,  576,  571,    0,  562,  525,    0,  537,
      525,    0,    0,    0,    0,  539,    0,    0,  520,    0,
      531,  524,  530,  520,  519,    0,  514,  527,  522,    0,
        0,  510,  506,  521,    0,  517,  503,  514,  512,    0,
      511,  499,  492,  503,  500,    0,  498,  498,    0,  496,
      495,  478,    0,  475,  474,  488,  485,    0,    0,    0,
      482,    0,  469,  483,    0,    0,    0,    0,  480,  464,
        0,    0,  479,    0,    0,  470,  455,    0,    0,  448,
      442,  427,  398,  412,    0,    0,  333,  279,  250,  221,
        0,  861,  591,  599,  607,  615,  619,  623,  627,  633,

      639,  643,  645,  647
    } ;

static yyconst short int yy_def[505] =
    {   0,
      492,    1,  492,    3,  492,    5,  493,  493,  494,  494,
      492,  492,  492,  492,  492,  492,  495,  492,  492,  496,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  497,  497,  492,  492,
      492,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      492,  492,  492,  492,  492,  492,  492,  492,  498,  492,
      498,  492,  492,  499,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  495,  492,  500,  492,  492,  492,
      496,  501,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      502,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      497,  495,  496,  492,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  492,
      492,  492,  492,  498,  498,  499,  492,  495,  503,  492,
      496,  504,  492,  492,  492,  492,  492,  492,  492,  502,
      492,  492,  492,  497,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  498,  495,  495,  496,  496,
      492,  492,  492,  492,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  498,  495,  258,  496,
      260,  492,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  498,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  498,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,    0,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  492
    } ;

static yyconst short int yy_nxt[932] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   30,   31,   32,   33,   34,   35,   36,
       37,   37,   37,   37,   38,   37,   37,   39,   12,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   37,
       50,   37,   51,   37,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   37,   37,   37,   61,   62,   63,   64,
       65,  116,  117,  119,  120,   65,  198,  199,   66,   67,
       67,   68,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   69,
       69,   69,   69,   69,   69,   69,   67,   70,   67,   67,
       69,   69,   69,   69,   71,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   67,   67,   67,   67,   72,
       72,   73,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   74,
       74,   74,   74,   74,   74,   74,   72,   72,   72,   72,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   72,   72,   72,   72,   78,
       78,   80,   81,   82,   82,   82,   80,   86,   89,   94,
      238,  189,   79,   79,   82,   81,   83,   83,   83,   82,
       95,   96,  122,  127,   90,  128,  123,  239,   99,  189,
       97,   98,  100,  102,  101,  101,  101,   87,  103,  105,
      150,  112,  112,  112,  151,  104,  105,  133,  106,  106,
      107,  108,  146,  134,  113,  114,  135,  129,  108,  147,
      491,  109,  110,  111,  130,  136,  108,  131,  170,  141,
      132,  142,  113,  108,  143,  154,  144,  148,  155,  109,

      114,  137,  149,  138,  152,  180,  139,  110,  490,  153,
      111,   86,  140,  157,  158,  161,  165,  167,  162,  163,
      166,  489,  168,  159,  178,  178,  160,  203,  171,  181,
      181,   92,  204,  164,  172,   81,   82,   82,   82,  172,
      189,   87,  173,   80,   81,   82,   82,   82,   80,   82,
       81,   82,   82,   82,   82,   82,   81,   83,   83,   83,
       82,   86,  101,  101,  101,  189,  179,  253,  208,  254,
      191,  182,  185,  186,  219,  186,  209,  488,  191,  101,
      101,  101,  105,  220,  106,  106,  107,  185,  186,  185,
      186,   87,  186,  186,  108,  191,  191,  109,  110,  105,

      230,  107,  107,  107,  185,  186,  210,  240,  231,  108,
      186,  108,  187,  232,  187,  109,  221,  188,  188,  188,
       86,  211,  241,  110,  222,  105,  108,  112,  112,  112,
      180,  223,  234,  248,  235,  244,  332,  108,  249,  180,
      113,  114,  245,  236,  273,  274,  250,  278,  259,  259,
       87,  279,  108,  487,  332,   86,   92,  486,  113,  172,
       81,   82,   82,   82,  172,   92,  114,  173,  257,  257,
      261,  332,  261,  263,  264,  262,  262,  262,  188,  188,
      188,  188,  188,  188,   86,   87,  485,  275,  262,  262,
      262,  263,  186,  180,  186,  276,  332,  328,  328,  264,

      358,  484,  330,  330,  369,  359,  483,  186,  377,  262,
      262,  262,  186,  482,   87,   86,  481,  378,  370,   92,
      186,  480,  186,  479,  478,  477,  476,  475,  329,  329,
      329,  474,  473,  472,  471,  186,  470,  329,  329,  329,
      186,  469,  468,  467,  466,   87,  465,  464,  463,  329,
      329,  329,  329,  329,  329,  180,  462,  461,  460,  459,
      458,  457,  456,  455,  331,  331,  331,  454,  453,  452,
      451,  450,  449,  331,  331,  331,  448,  447,  446,  445,
      444,   92,  443,  442,  441,  331,  331,  331,  331,  331,
      331,   75,   75,   75,   75,   75,   75,   75,   75,   77,

       77,   77,   77,   77,   77,   77,   77,   85,  440,   85,
       85,   85,   85,   85,   85,   91,  439,   91,  438,   91,
       91,   91,   91,  121,  121,  121,  121,  174,  174,  174,
      174,  176,  176,  176,  176,   85,   85,   85,  437,  436,
       85,   91,   91,   91,  435,  434,   91,  190,  190,  258,
      258,  260,  260,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,

      386,  385,  384,  383,  382,  381,  380,  379,  376,  375,
      374,  373,  372,  371,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  277,  272,  271,  270,

      269,  268,  267,  266,  265,  256,  255,  252,  251,  247,
      246,  243,  242,  237,  233,  229,  228,  227,  226,  225,
      224,  218,  217,  216,  215,  214,  213,  212,  207,  206,
      205,  202,  201,  200,  197,  196,  195,  194,   92,  193,
      192,  184,  183,  177,  175,  169,  156,  145,  126,  125,
      124,  118,  115,   93,   92,   88,   84,  492,   76,   76,
       11,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492
    } ;

static yyconst short int yy_chk[932] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,   33,   33,   35,   35,    2,  129,  129,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    9,
       10,   13,   13,   13,   13,   13,   13,   17,   19,   24,
      158,  110,    9,   10,   15,   15,   15,   15,   15,   15,
       24,   26,   38,   44,   19,   44,   38,  158,   27,  110,
       26,   26,   27,   28,   27,   27,   27,   17,   28,   30,
       52,   30,   30,   30,   52,   28,   29,   46,   29,   29,
       29,   30,   50,   46,   30,   30,   46,   45,   29,   50,
      490,   29,   29,   29,   45,   46,   30,   45,   62,   48,
       45,   48,   30,   29,   48,   54,   48,   51,   54,   29,

       30,   47,   51,   47,   53,   91,   47,   29,  489,   53,
       29,   85,   47,   56,   56,   57,   58,   59,   57,   57,
       58,  488,   59,   56,   87,   87,   56,  133,   62,   92,
       92,   91,  133,   57,   65,   65,   65,   65,   65,   65,
      109,   85,   65,   80,   80,   80,   80,   80,   80,   82,
       82,   82,   82,   82,   82,   83,   83,   83,   83,   83,
       83,  122,  101,  101,  101,  109,   87,  168,  137,  168,
      113,   92,  101,  101,  146,  101,  137,  487,  114,  105,
      105,  105,  106,  146,  106,  106,  106,  101,  101,  105,
      105,  122,  105,  101,  106,  113,  114,  106,  106,  107,

      154,  107,  107,  107,  105,  105,  138,  159,  154,  106,
      105,  107,  108,  154,  108,  106,  147,  108,  108,  108,
      328,  138,  159,  106,  147,  112,  107,  112,  112,  112,
      330,  147,  156,  165,  156,  162,  264,  112,  165,  181,
      112,  112,  162,  156,  202,  202,  165,  205,  181,  181,
      328,  205,  112,  484,  264,  178,  330,  483,  112,  172,
      172,  172,  172,  172,  172,  181,  112,  172,  178,  178,
      185,  263,  185,  190,  190,  185,  185,  185,  187,  187,
      187,  188,  188,  188,  257,  178,  482,  203,  261,  261,
      261,  190,  188,  259,  188,  203,  263,  257,  257,  190,

      300,  481,  259,  259,  310,  300,  480,  188,  318,  262,
      262,  262,  188,  477,  257,  258,  476,  318,  310,  259,
      262,  473,  262,  470,  469,  464,  463,  461,  258,  258,
      258,  457,  456,  455,  454,  262,  452,  258,  258,  258,
      262,  451,  450,  448,  447,  258,  445,  444,  443,  258,
      258,  258,  258,  258,  258,  260,  442,  441,  439,  438,
      437,  436,  434,  433,  260,  260,  260,  432,  429,  428,
      427,  425,  424,  260,  260,  260,  423,  422,  421,  419,
      416,  260,  411,  410,  408,  260,  260,  260,  260,  260,
      260,  493,  493,  493,  493,  493,  493,  493,  493,  494,

      494,  494,  494,  494,  494,  494,  494,  495,  407,  495,
      495,  495,  495,  495,  495,  496,  405,  496,  404,  496,
      496,  496,  496,  497,  497,  497,  497,  498,  498,  498,
      498,  499,  499,  499,  499,  500,  500,  500,  403,  402,
      500,  501,  501,  501,  400,  396,  501,  502,  502,  503,
      503,  504,  504,  394,  393,  391,  390,  389,  388,  387,
      386,  384,  383,  381,  378,  377,  376,  374,  373,  372,
      371,  370,  369,  368,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  351,  348,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  333,

      327,  326,  325,  323,  322,  321,  320,  319,  317,  316,
      314,  313,  312,  311,  309,  308,  307,  306,  305,  304,
      303,  302,  301,  299,  298,  295,  294,  293,  292,  290,
      289,  288,  287,  286,  284,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  270,  268,  265,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  226,  225,  224,
      222,  221,  220,  219,  218,  217,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  204,  201,  200,  199,

      198,  197,  196,  195,  194,  175,  169,  167,  166,  164,
      163,  161,  160,  157,  155,  153,  152,  151,  150,  149,
      148,  145,  144,  143,  142,  141,  140,  139,  136,  135,
      134,  132,  131,  130,  128,  127,  126,  125,  123,  120,
      116,  100,   98,   79,   71,   60,   55,   49,   43,   42,
       41,   34,   31,   23,   20,   18,   16,   11,    8,    7,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/* Included code before lex code */
/*************** Includes and Defines *****************************/


#include "map"
#include "cpp_lexer.h"		// YACC generated definitions based on C++ grammar
#include "errno.h"

#define YYSTYPE std::string
#define ECHO

#include "string"
#include <stdlib.h>
#include <string.h>
#include <vector>

extern std::string cl_scope_lval;
extern std::string cl_var_lval;
extern std::string cl_func_lval;
extern std::string cl_typedef_lval;

std::vector<std::string> currentScope;

bool setLexerInput(const std::string &in, const std::map<std::string, std::string> &ignoreTokens);
void setUseIgnoreMacros(bool ignore);

std::string getCurrentScope();
void printScopeName();
void cl_scope_lex_clean();
void cl_scope_less(int count);

//we keep a very primitive map with only symbol name
//that we encountered so far
std::map<std::string, std::string> g_symbols;
std::map<std::string, std::string> g_macros;

static std::map<std::string, std::string> g_ignoreList;
static bool gs_useMacroIgnore = true;

bool isaTYPE(char *string);
bool isaMACRO(char *string);
bool isignoredToken(char *string);

static bool defineFound = false;

/* Prototypes */
#define WHITE_RETURN(x) /* do nothing */

#define PA_KEYWORD_RETURN(x)   RETURN_VAL(x)  /* standard C PArser Keyword */
#define CPP_KEYWORD_RETURN(x)  PA_KEYWORD_RETURN(x)  /* C++ keyword */
#define PPPA_KEYWORD_RETURN(x) RETURN_VAL(x)  /* both PreProcessor and PArser keyword */
#define PP_KEYWORD_RETURN(x)   IDENTIFIER_RETURN()

#define IDENTIFIER_RETURN(){\
										if(isaTYPE(yytext)){\
											RETURN_VAL(LE_TYPEDEFname);\
										}else if(isaMACRO(yytext)){\
											RETURN_VAL(LE_MACRO);\
										}else if(isignoredToken(yytext)){\
										}else{ RETURN_VAL(LE_IDENTIFIER);}\
									}


#define PPOP_RETURN(x)       RETURN_VAL((int)*yytext) /* PreProcess and Parser operator */
#define NAMED_PPOP_RETURN(x) RETURN_VAL(x)
#define ASCIIOP_RETURN(x)    RETURN_VAL((int)*yytext) /* a single character operator */
#define NAMEDOP_RETURN(x)    RETURN_VAL(x)            /* a multichar operator, with a name */

#define NUMERICAL_RETURN(x) RETURN_VAL(x)            /* some sort of constant */
#define LITERAL_RETURN(x)   RETURN_VAL(x)            /* a string literal */
#define C_COMMENT_RETURN(x) RETURN_VAL(x)	     /* C Style comment  */
#define RETURN_VAL(x) {\
								cl_scope_lval   = yytext;\
								cl_var_lval     = yytext;\
								cl_func_lval    = yytext;\
								cl_typedef_lval = yytext;\
								return(x);}

#define PREPR 1

#define WRAP_PREP 2

#define CPP_COMMENT 3

#define C_COMMENT 4


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 493 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 861 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
			BEGIN C_COMMENT;
     }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
			BEGIN CPP_COMMENT;
     }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
			WHITE_RETURN(' ');
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
			WHITE_RETURN(' ');
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
			WHITE_RETURN('\n');
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_AUTO);}
	YY_BREAK
case 7:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_BREAK);}
	YY_BREAK
case 8:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_CASE);}
	YY_BREAK
case 9:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_CHAR);}
	YY_BREAK
case 10:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_CONST);}
	YY_BREAK
case 11:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_CONTINUE);}
	YY_BREAK
case 12:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_DEFAULT);}
	YY_BREAK
case 13:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_DEFINE);}
	YY_BREAK
case 14:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_OPDEFINED);}
	YY_BREAK
case 15:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_DO);}
	YY_BREAK
case 16:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_DOUBLE);}
	YY_BREAK
case 17:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_ELIF);}
	YY_BREAK
case 18:
YY_RULE_SETUP
{PPPA_KEYWORD_RETURN(LE_ELSE);}
	YY_BREAK
case 19:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_ENDIF);}
	YY_BREAK
case 20:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_ENUM);}
	YY_BREAK
case 21:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_ERROR);}
	YY_BREAK
case 22:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_EXTERN);}
	YY_BREAK
case 23:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_FLOAT);}
	YY_BREAK
case 24:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_FOR);}
	YY_BREAK
case 25:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_GOTO);}
	YY_BREAK
case 26:
YY_RULE_SETUP
{PPPA_KEYWORD_RETURN(LE_IF);}
	YY_BREAK
case 27:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_IFDEF);}
	YY_BREAK
case 28:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_IFNDEF);}
	YY_BREAK
case 29:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_INCLUDE); }
	YY_BREAK
case 30:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_INT);}
	YY_BREAK
case 31:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_LINE);}
	YY_BREAK
case 32:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_LONG);}
	YY_BREAK
case 33:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_BOOL);}
	YY_BREAK
case 34:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_PRAGMA);}
	YY_BREAK
case 35:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_REGISTER);}
	YY_BREAK
case 36:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_RETURN);}
	YY_BREAK
case 37:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SHORT);}
	YY_BREAK
case 38:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SIGNED);}
	YY_BREAK
case 39:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SIZEOF);}
	YY_BREAK
case 40:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_STATIC);}
	YY_BREAK
case 41:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_STRUCT);}
	YY_BREAK
case 42:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SWITCH);}
	YY_BREAK
case 43:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_TYPEDEF);}
	YY_BREAK
case 44:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_UNDEF);}
	YY_BREAK
case 45:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_UNION);}
	YY_BREAK
case 46:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_UNSIGNED);}
	YY_BREAK
case 47:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_VOID);}
	YY_BREAK
case 48:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_VOLATILE);}
	YY_BREAK
case 49:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_WHILE);}
	YY_BREAK
case 50:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_TIME_T);}
	YY_BREAK
case 51:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SIZE_T);}
	YY_BREAK
case 52:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_CLASS);}
	YY_BREAK
case 53:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_NAMESPACE);}
	YY_BREAK
case 54:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_DELETE);}
	YY_BREAK
case 55:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_FRIEND);}
	YY_BREAK
case 56:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_INLINE);}
	YY_BREAK
case 57:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_NEW);}
	YY_BREAK
case 58:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_OPERATOR);}
	YY_BREAK
case 59:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_OVERLOAD);}
	YY_BREAK
case 60:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_OVERRIDE);}
	YY_BREAK
case 61:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_FINAL);}
	YY_BREAK
case 62:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_PROTECTED);}
	YY_BREAK
case 63:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_PRIVATE);}
	YY_BREAK
case 64:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_PUBLIC);}
	YY_BREAK
case 65:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_THIS);}
	YY_BREAK
case 66:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_VIRTUAL);}
	YY_BREAK
case 67:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_TEMPLATE);}
	YY_BREAK
case 68:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_TYPENAME);}
	YY_BREAK
case 69:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_DYNAMIC_CAST);}
	YY_BREAK
case 70:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_STATIC_CAST);}
	YY_BREAK
case 71:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_CONST_CAST);}
	YY_BREAK
case 72:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_REINTERPRET_CAST);}
	YY_BREAK
case 73:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_USING);}
	YY_BREAK
case 74:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_THROW);}
	YY_BREAK
case 75:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_CATCH);}
	YY_BREAK
case 76:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_DECLSPEC);}
	YY_BREAK
case 77:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_DLLIMPORT);}
	YY_BREAK
case 78:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_DLLIEXPORT);}
	YY_BREAK
case 79:
YY_RULE_SETUP
{IDENTIFIER_RETURN();}
	YY_BREAK
case 80:
YY_RULE_SETUP
{NUMERICAL_RETURN(LE_INTEGERconstant);}
	YY_BREAK
case 81:
YY_RULE_SETUP
{NUMERICAL_RETURN(LE_OCTALconstant);}
	YY_BREAK
case 82:
YY_RULE_SETUP
{NUMERICAL_RETURN(LE_HEXconstant);}
	YY_BREAK
case 83:
YY_RULE_SETUP
{NUMERICAL_RETURN(LE_FLOATINGconstant);}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
			NUMERICAL_RETURN(LE_CHARACTERconstant);
			}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
			LITERAL_RETURN(LE_STRINGliteral);}
	YY_BREAK
case 86:
YY_RULE_SETUP
{PPOP_RETURN(LE_LP);}
	YY_BREAK
case 87:
YY_RULE_SETUP
{PPOP_RETURN(LE_RP);}
	YY_BREAK
case 88:
YY_RULE_SETUP
{PPOP_RETURN(LE_COMMA);}
	YY_BREAK
case 89:
YY_RULE_SETUP
{BEGIN PREPR;}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_LC);}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_RC);}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_LB);}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_RB);}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_DOT);}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_AND);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_STAR);}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_PLUS);}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_MINUS);}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_NEGATE);}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_NOT);}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_DIV);}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_MOD);}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_LT);}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_GT);}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_XOR);}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_PIPE);}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_QUESTION);}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_COLON);}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_SEMICOLON);}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_ASSIGN);}
	YY_BREAK
case 111:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_DOTstar);}
	YY_BREAK
case 112:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_CLCL);}
	YY_BREAK
case 113:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ARROW);}
	YY_BREAK
case 114:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ARROWstar);}
	YY_BREAK
case 115:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ICR);}
	YY_BREAK
case 116:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_DECR);}
	YY_BREAK
case 117:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_LS);}
	YY_BREAK
case 118:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_RS);}
	YY_BREAK
case 119:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_LE);}
	YY_BREAK
case 120:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_GE);}
	YY_BREAK
case 121:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_EQ);}
	YY_BREAK
case 122:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_NE);}
	YY_BREAK
case 123:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ANDAND);}
	YY_BREAK
case 124:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_OROR);}
	YY_BREAK
case 125:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_MULTassign);}
	YY_BREAK
case 126:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_DIVassign);}
	YY_BREAK
case 127:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_MODassign);}
	YY_BREAK
case 128:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_PLUSassign);}
	YY_BREAK
case 129:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_MINUSassign);}
	YY_BREAK
case 130:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_LSassign);}
	YY_BREAK
case 131:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_RSassign);}
	YY_BREAK
case 132:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ANDassign);}
	YY_BREAK
case 133:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ERassign);}
	YY_BREAK
case 134:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ORassign);}
	YY_BREAK
case 135:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ELLIPSIS);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PREPR):
case YY_STATE_EOF(WRAP_PREP):
case YY_STATE_EOF(CPP_COMMENT):
case YY_STATE_EOF(C_COMMENT):
{
							//reset lexer
							yyterminate();
						}
	YY_BREAK
case 136:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 137:
YY_RULE_SETUP
{
						defineFound = false;
						BEGIN INITIAL;
					}
	YY_BREAK
case 138:
YY_RULE_SETUP
{
						BEGIN WRAP_PREP;
					}
	YY_BREAK
case 139:
YY_RULE_SETUP
{
						defineFound = true;
					}
	YY_BREAK
case 140:
YY_RULE_SETUP
{
						BEGIN PREPR;
					}
	YY_BREAK
case 141:
YY_RULE_SETUP
{
						if(defineFound)
						{
							defineFound = false;
							g_macros[yytext] = true;
						}
					}
	YY_BREAK
case 142:
YY_RULE_SETUP
{
						if(defineFound)
						{
							defineFound = false;
							g_macros[yytext] = true;
						}
					}
	YY_BREAK
case 143:
YY_RULE_SETUP
{}
	YY_BREAK
case 144:
YY_RULE_SETUP
{}
	YY_BREAK
case 145:
YY_RULE_SETUP
{BEGIN INITIAL;}
	YY_BREAK
case 146:
YY_RULE_SETUP
{}
	YY_BREAK
case 147:
YY_RULE_SETUP
{BEGIN INITIAL;}
	YY_BREAK
case 148:
YY_RULE_SETUP
{}
	YY_BREAK
case 149:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 493 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 493 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 492);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


bool isaTYPE(char *string)
{
	return g_symbols.find(string) != g_symbols.end();
}

bool isignoredToken(char *string)
{
	std::map<std::string, std::string>::iterator iter = g_ignoreList.find(string);
	if(iter == g_ignoreList.end()){
		/* this string is not in the ignore macro list */
		return false;
	} else {
		/* it exist, but maybe it has a replacement */
		return iter->second.empty();
	}
}

bool isaMACRO(char *string)
{
	if(gs_useMacroIgnore) {
		return g_macros.find(string) != g_macros.end();
	}else{
		return false;
	}
}

void cl_scope_lex_clean()
{
	yy_flush_buffer(YY_CURRENT_BUFFER);
	yy_delete_buffer(YY_CURRENT_BUFFER);
	cl_scope_lineno = 1;
	currentScope.clear();
	g_symbols.clear();
	g_macros.clear();
}

/**
 * scope util functions
 */
void printScopeName()
{
	/*
	if(currentScope.empty())
	{
		printf("%d: current scope is global scope\n", cl_scope_lineno );
	}
	else
	{
		printf("%d: current scope is %s\n", cl_scope_lineno, getCurrentScope().c_str());
	}
	*/
}

void increaseScope()
{
	static int value = 0;
	std::string scopeName("__anon_");

	char buf[100];
	sprintf(buf, "%d", value++);
	scopeName += buf;
	currentScope.push_back(scopeName);
}

std::string getCurrentScope()
{
	//format scope name
	std::string scope;
	if(currentScope.empty()){
		return "";
	}

	std::vector<std::string> tmpscope(currentScope);

	while( tmpscope.empty() == false ){
		std::string _scope = tmpscope.front();
		tmpscope.erase(tmpscope.begin());

		if(_scope.find("__anon_") == (size_t)-1 && _scope.empty() == false){
			scope += _scope;
			scope += "::";
		}
	}

	//remove the trailing '::'
	scope.erase(scope.find_last_not_of(":")+1);
	return scope;
}

/*******************************************************************/
bool setLexerInput(const std::string &in, const std::map<std::string, std::string> &ignoreTokens)
{
	BEGIN INITIAL;
	yy_scan_string(in.c_str());

	g_ignoreList = ignoreTokens;

	//update the working file name
	return true;
}

void setUseIgnoreMacros(bool ignore) {
	gs_useMacroIgnore = ignore;
}

int yywrap(){
	return 1;
}

void cl_scope_less(int count){
	yyless(count);
}
