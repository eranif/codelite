//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: AutoSaveUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "AutoSaveUI.h"


// Declare the bitmap loading function
extern void wxCrafter7A2fyVInitBitmapResources();

static bool bBitmapLoaded = false;


AutoSaveDlgBase::AutoSaveDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7A2fyVInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer2);
    
    wxFlexGridSizer* flexGridSizer8 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer8->SetFlexibleDirection( wxBOTH );
    flexGridSizer8->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer8->AddGrowableCol(1);
    
    boxSizer2->Add(flexGridSizer8, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxEnabled = new wxCheckBox(this, wxID_ANY, _("Enable Auto Save"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_checkBoxEnabled->SetValue(true);
    
    flexGridSizer8->Add(m_checkBoxEnabled, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer8->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText14 = new wxStaticText(this, wxID_ANY, _("Save interval:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_staticText14->SetToolTip(_("Check and save modified files interval (in seconds)"));
    
    flexGridSizer8->Add(m_staticText14, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_spinCtrlInterval = new wxSpinCtrl(this, wxID_ANY, wxT("5"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_WRAP|wxSP_ARROW_KEYS);
    m_spinCtrlInterval->SetToolTip(_("Check and save modified files interval (in seconds)"));
    m_spinCtrlInterval->SetRange(1, 100);
    m_spinCtrlInterval->SetValue(5);
    
    flexGridSizer8->Add(m_spinCtrlInterval, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer4 = new wxStdDialogButtonSizer();
    
    boxSizer2->Add(m_stdBtnSizer4, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_button6 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button6->SetDefault();
    m_stdBtnSizer4->AddButton(m_button6);
    m_stdBtnSizer4->Realize();
    
    SetName(wxT("AutoSaveDlgBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_staticText14->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(AutoSaveDlgBase::OnEnabledUI), NULL, this);
    m_spinCtrlInterval->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(AutoSaveDlgBase::OnEnabledUI), NULL, this);
    m_button6->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AutoSaveDlgBase::OnOK), NULL, this);
    
}

AutoSaveDlgBase::~AutoSaveDlgBase()
{
    m_staticText14->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(AutoSaveDlgBase::OnEnabledUI), NULL, this);
    m_spinCtrlInterval->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(AutoSaveDlgBase::OnEnabledUI), NULL, this);
    m_button6->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AutoSaveDlgBase::OnOK), NULL, this);
    
}
