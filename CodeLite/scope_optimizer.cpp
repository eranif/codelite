
#line 3 "scope_optimizer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scope_optimizer__create_buffer
#define yy_delete_buffer scope_optimizer__delete_buffer
#define yy_flex_debug scope_optimizer__flex_debug
#define yy_init_buffer scope_optimizer__init_buffer
#define yy_flush_buffer scope_optimizer__flush_buffer
#define yy_load_buffer_state scope_optimizer__load_buffer_state
#define yy_switch_to_buffer scope_optimizer__switch_to_buffer
#define yyin scope_optimizer_in
#define yyleng scope_optimizer_leng
#define yylex scope_optimizer_lex
#define yylineno scope_optimizer_lineno
#define yyout scope_optimizer_out
#define yyrestart scope_optimizer_restart
#define yytext scope_optimizer_text
#define yywrap scope_optimizer_wrap
#define yyalloc scope_optimizer_alloc
#define yyrealloc scope_optimizer_realloc
#define yyfree scope_optimizer_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scope_optimizer_restart(scope_optimizer_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t scope_optimizer_leng;

extern FILE *scope_optimizer_in, *scope_optimizer_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE scope_optimizer_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-scope_optimizer_lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < scope_optimizer_leng; ++yyl )\
                    if ( scope_optimizer_text[yyl] == '\n' )\
                        --scope_optimizer_lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scope_optimizer_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scope_optimizer_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scope_optimizer_restart()), so that the user can continue scanning by
	 * just pointing scope_optimizer_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scope_optimizer_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t scope_optimizer_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scope_optimizer_wrap()'s to do buffer switches
 * instead of setting up a fresh scope_optimizer_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scope_optimizer_restart (FILE *input_file  );
void scope_optimizer__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scope_optimizer__create_buffer (FILE *file,int size  );
void scope_optimizer__delete_buffer (YY_BUFFER_STATE b  );
void scope_optimizer__flush_buffer (YY_BUFFER_STATE b  );
void scope_optimizer_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void scope_optimizer_pop_buffer_state (void );

static void scope_optimizer_ensure_buffer_stack (void );
static void scope_optimizer__load_buffer_state (void );
static void scope_optimizer__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scope_optimizer__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scope_optimizer__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scope_optimizer__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scope_optimizer__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *scope_optimizer_alloc (yy_size_t  );
void *scope_optimizer_realloc (void *,yy_size_t  );
void scope_optimizer_free (void *  );

#define yy_new_buffer scope_optimizer__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scope_optimizer_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scope_optimizer__create_buffer(scope_optimizer_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scope_optimizer_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scope_optimizer__create_buffer(scope_optimizer_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *scope_optimizer_in = (FILE *) 0, *scope_optimizer_out = (FILE *) 0;

typedef int yy_state_type;

extern int scope_optimizer_lineno;

int scope_optimizer_lineno = 1;

extern char *scope_optimizer_text;
#define yytext_ptr scope_optimizer_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scope_optimizer_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scope_optimizer_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[352] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,   79,    3,    5,    4,   79,
       14,   79,   29,   30,   79,   78,   78,   79,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   31,   32,   17,   16,
       15,   17,   21,    6,    8,    7,   19,   20,   21,   28,
        9,   11,   10,   26,   27,   28,   83,   84,   83,   83,
       81,   80,   81,   25,   25,   24,    3,    5,    0,    4,
        0,   13,    0,    0,    0,    2,    1,   78,    0,    0,
        0,    0,    0,    0,   78,   78,   78,   78,   78,   78,

       40,   78,   78,   78,   78,   78,   78,   78,   46,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,    6,    8,    0,
        7,    9,   11,    0,   10,   82,   24,    0,    0,   12,
        0,    0,    0,    0,    0,    0,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   70,   78,   78,   78,   78,   78,   78,    0,    0,
        0,    0,    0,   23,    0,   33,   78,   35,   78,   78,

       78,   78,   78,   78,   78,   78,   41,   42,   78,   78,
        0,   22,   78,   45,   78,   78,   78,   78,   50,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,    0,
        0,    0,    0,    0,   34,   18,   58,   78,   78,   78,
       78,   78,   78,   43,   44,   78,   47,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   77,   78,   55,   56,   76,   78,   57,
        0,   78,   78,   78,   38,   61,   78,   62,   48,   78,
       63,   78,   78,   51,   78,   78,   67,   78,   52,   53,

       78,   59,   54,   78,   78,   78,   78,   78,   37,   39,
       78,   49,   78,   78,   66,   78,   78,   78,   78,   78,
       68,   78,   36,   78,   78,   64,   78,   78,   78,   69,
       71,   78,   78,   60,   65,   78,   78,   74,   78,   78,
       78,   78,   78,   73,   72,   78,   78,   78,   78,   75,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    1,    8,    9,    1,    1,   10,   11,   12,
       13,   14,    1,    1,    1,    1,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   17,   17,    1,    1,    1,
       18,    1,   19,    1,   20,   20,   20,   20,   20,   20,
       21,   21,   21,   21,   21,   22,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       23,   24,   25,    1,   26,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   21,   36,   37,   38,   39,
       40,   41,   21,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    1,
        4,    1,    1,    1,    1,    5,    6,    1,    3,    6,
        7,    7,    1,    3,    1,    7,    5,    5,    6,    6,
        6,    5,    7,    7,    7,    7,    7,    7,    8,    7,
        7,    8,    7,    8,    7,    8,    7,    8,    7,    7,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[365] =
    {   0,
        0,    0,   50,   51,   65,   79,   93,  107,   59,   61,
       86,   87,  122,    0,  650,  651,  173,  651,  179,   55,
      651,  625,  651,  651,   41,    0,   96,  185,  603,  605,
      161,  159,   79,   19,  606,  157,  610,  617,  602,  149,
      611,  158,  173,  167,  606,  606,  651,  651,  651,  651,
      651,   73,  651,  214,  651,  221,  651,  651,  197,  651,
      228,  651,  234,  651,  651,  199,  651,  651,  624,  228,
      651,  651,  230,  651,  232,    0,  246,  651,  252,  258,
      258,  651,  251,  257,  253,  651,  651,    0,  262,  614,
      269,  270,  271,  603,  592,  604,  231,  607,  594,  248,

        0,  593,  248,  601,  588,  587,  593,  583,  170,  255,
      587,  587,  593,  262,  595,  259,  572,  263,  586,  582,
      577,  569,  576,  258,  581,  573,  579,  304,  651,  312,
      318,  324,  651,  330,  336,  651,    0,  336,    0,  651,
      334,    0,  344,  341,  347,  578,  572,  584,  579,  580,
      565,  312,  277,  576,  579,  573,  573,  568,  562,  350,
      570,  560,  568,  568,  560,  561,  564,  563,  551,  559,
      545,  546,  552,  549,  542,  555,  541,  539,  539,  541,
      541,    0,  549,  548,  538,  538,  532,  538,  351,  368,
      350,  390,  356,  651,  531,    0,  537,    0,  538,  528,

      526,  534,  523,  528,  522,  527,    0,    0,  532,  521,
      358,  651,  523,    0,  529,  529,  514,  519,    0,  514,
      529,  517,  527,  522,  517,  507,  508,  509,  513,  518,
      517,  508,  497,  504,  510,  502,  507,  494,  507,  356,
        0,  362,    0,  380,    0,    0,    0,  511,  497,  498,
      503,  502,  497,    0,    0,  501,    0,  498,  499,  497,
      486,  482,  498,  480,  494,  493,  490,  481,  487,  489,
      473,  482,  488,    0,  487,    0,    0,    0,  486,    0,
      387,  483,  466,  466,  479,    0,  479,    0,    0,  476,
        0,  479,  465,    0,  473,  459,    0,  455,    0,    0,

      470,    0,    0,  447,  452,  437,  445,  433,    0,    0,
      390,    0,  386,  371,    0,  380,  368,  379,  373,  372,
        0,  359,    0,  364,  360,    0,  360,  341,  354,    0,
        0,  335,  351,    0,    0,  346,  328,    0,  304,  256,
      254,  153,   91,    0,    0,   86,   76,   50,   16,    0,
      651,  422,  430,  438,  446,  454,  462,  470,  474,  478,
      484,  490,  494,  496
    } ;

static yyconst flex_int16_t yy_def[365] =
    {   0,
      351,    1,  352,  352,  353,  353,  354,  354,  355,  355,
      356,  356,  351,   13,  351,  351,  351,  351,  351,  357,
      351,  358,  351,  351,  351,  359,  359,  351,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  360,  351,  351,  351,  351,
      357,  351,  361,  358,  362,  351,  351,  359,  357,  358,
      351,  351,  351,  351,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  360,  357,  363,  351,
      358,  364,  351,  351,  351,  351,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  357,  357,
      358,  358,  351,  351,  351,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      351,  351,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  357,
      190,  358,  192,  351,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      351,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
        0,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351
    } ;

static yyconst flex_int16_t yy_nxt[704] =
    {   0,
       16,   17,   18,   19,   19,   19,   17,   20,   21,   16,
       22,   23,   24,   16,   25,   16,   16,   16,   16,   26,
       26,   27,   28,   16,   16,   26,   29,   30,   31,   32,
       33,   34,   35,   26,   36,   26,   37,   26,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   26,   26,   26,
       47,   48,   50,   50,   86,   87,   51,   51,  106,  350,
      107,   68,   82,   68,   52,   52,   54,   55,   56,   56,
       56,   54,   69,   70,   69,   70,   57,   58,   83,   59,
       54,   55,   56,   56,   56,   54,   86,   87,   72,   72,
       57,   58,  349,   59,   61,   62,   63,   63,   63,   61,

       73,   73,  348,   89,   64,   65,   90,   66,   61,   62,
       63,   63,   63,   61,  347,  103,  346,  104,   64,   65,
      105,   66,   74,   74,   68,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   75,   74,   74,   74,
       74,   76,   76,   76,   74,   74,   74,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   74,   74,   77,   78,   79,   79,   79,   77,
       79,   78,   80,   80,   80,   79,   91,   97,  109,  100,
      114,   91,  117,  115,   92,  110,  345,   98,  101,  163,

       99,  118,   93,  120,  119,  124,  121,  102,  164,  125,
       86,   87,   86,   87,  122,  128,  129,  130,  130,  130,
      128,  123,  130,  129,  131,  131,  131,  130,   94,  132,
      133,  134,  134,  134,  132,  134,  133,  135,  135,  135,
      134,   86,   87,   86,   87,   86,   87,   77,   78,   79,
       79,   79,   77,   79,   78,   79,   79,   79,   79,   79,
       78,   80,   80,   80,   79,   82,  138,  140,  141,   82,
       91,  143,  145,  149,  150,   91,  143,  145,   92,  153,
       85,   83,  156,  165,  154,   83,   93,  184,  170,  177,
      157,  166,  185,  174,  144,  144,  171,  344,  139,  343,

      142,  172,  175,  203,  178,  128,  129,  130,  130,  130,
      128,  204,   94,  130,  129,  130,  130,  130,  130,  130,
      129,  131,  131,  131,  130,  132,  133,  134,  134,  134,
      132,  134,  133,  134,  134,  134,  134,  134,  133,  135,
      135,  135,  134,   82,  140,  143,  342,  193,  145,  191,
      143,  189,  194,  145,  201,  202,  211,   85,   82,   83,
      140,  212,  193,   82,  211,  242,  240,  194,  144,  212,
      341,  144,  140,   85,   83,   82,  340,  339,  338,   83,
      337,  281,  336,  241,  241,   85,  281,  241,  281,  335,
      334,   83,  333,  281,  241,  241,  241,  241,  241,  241,

      140,  332,  331,  330,  144,  243,  243,  329,  328,  243,
      327,  144,  326,   85,  325,  324,  243,  243,  243,  243,
      243,  243,   49,   49,   49,   49,   49,   49,   49,   49,
       53,   53,   53,   53,   53,   53,   53,   53,   60,   60,
       60,   60,   60,   60,   60,   60,   67,   67,   67,   67,
       67,   67,   67,   67,   71,   71,   71,   71,   71,   71,
       71,   71,   81,  323,   81,   81,   81,   81,   81,   81,
       84,  322,   84,  321,   84,   84,   84,   84,   88,   88,
       88,   88,  137,  137,  137,  137,   81,   81,   81,  320,
      319,   81,   84,   84,   84,  318,  317,   84,  190,  190,

      192,  192,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  246,  245,  244,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  214,

      213,  210,  209,  208,  207,  206,  205,  200,  199,  198,
      197,  196,  195,  188,  187,  186,  183,  182,  181,  180,
      179,  176,  173,  169,  168,  167,  162,  161,  160,  159,
      158,  155,  152,  151,  148,  147,  146,   85,  136,  127,
      126,  116,  113,  112,  111,  108,   96,   95,   85,  351,
       15,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,

      351,  351,  351
    } ;

static yyconst flex_int16_t yy_chk[704] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,   25,   25,    3,    4,   34,  349,
       34,    9,   20,   10,    3,    4,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,    5,    5,   20,    5,
        6,    6,    6,    6,    6,    6,   52,   52,   11,   12,
        6,    6,  348,    6,    7,    7,    7,    7,    7,    7,

       11,   12,  347,   27,    7,    7,   27,    7,    8,    8,
        8,    8,    8,    8,  346,   33,  343,   33,    8,    8,
       33,    8,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   17,   17,   17,   17,   17,   17,
       19,   19,   19,   19,   19,   19,   28,   31,   36,   32,
       40,   28,   42,   40,   28,   36,  342,   31,   32,  109,

       31,   42,   28,   43,   42,   44,   43,   32,  109,   44,
       59,   59,   66,   66,   43,   54,   54,   54,   54,   54,
       54,   43,   56,   56,   56,   56,   56,   56,   28,   61,
       61,   61,   61,   61,   61,   63,   63,   63,   63,   63,
       63,   70,   70,   73,   73,   75,   75,   77,   77,   77,
       77,   77,   77,   79,   79,   79,   79,   79,   79,   80,
       80,   80,   80,   80,   80,   81,   83,   84,   85,   89,
       91,   92,   93,   97,   97,   91,   92,   93,   91,  100,
       84,   81,  103,  110,  100,   89,   91,  124,  114,  118,
      103,  110,  124,  116,   92,   93,  114,  341,   83,  340,

       85,  114,  116,  153,  118,  128,  128,  128,  128,  128,
      128,  153,   91,  130,  130,  130,  130,  130,  130,  131,
      131,  131,  131,  131,  131,  132,  132,  132,  132,  132,
      132,  134,  134,  134,  134,  134,  134,  135,  135,  135,
      135,  135,  135,  138,  141,  143,  339,  144,  145,  141,
      143,  138,  144,  145,  152,  152,  160,  141,  189,  138,
      191,  160,  193,  240,  211,  191,  189,  193,  143,  211,
      337,  145,  242,  191,  189,  190,  336,  333,  332,  240,
      329,  244,  328,  190,  190,  242,  244,  190,  281,  327,
      325,  190,  324,  281,  190,  190,  190,  190,  190,  190,

      192,  322,  320,  319,  244,  192,  192,  318,  317,  192,
      316,  281,  314,  192,  313,  311,  192,  192,  192,  192,
      192,  192,  352,  352,  352,  352,  352,  352,  352,  352,
      353,  353,  353,  353,  353,  353,  353,  353,  354,  354,
      354,  354,  354,  354,  354,  354,  355,  355,  355,  355,
      355,  355,  355,  355,  356,  356,  356,  356,  356,  356,
      356,  356,  357,  308,  357,  357,  357,  357,  357,  357,
      358,  307,  358,  306,  358,  358,  358,  358,  359,  359,
      359,  359,  360,  360,  360,  360,  361,  361,  361,  305,
      304,  361,  362,  362,  362,  301,  298,  362,  363,  363,

      364,  364,  296,  295,  293,  292,  290,  287,  285,  284,
      283,  282,  279,  275,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  258,
      256,  253,  252,  251,  250,  249,  248,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  218,  217,  216,
      215,  213,  210,  209,  206,  205,  204,  203,  202,  201,
      200,  199,  197,  195,  188,  187,  186,  185,  184,  183,
      181,  180,  179,  178,  177,  176,  175,  174,  173,  172,
      171,  170,  169,  168,  167,  166,  165,  164,  163,  162,

      161,  159,  158,  157,  156,  155,  154,  151,  150,  149,
      148,  147,  146,  127,  126,  125,  123,  122,  121,  120,
      119,  117,  115,  113,  112,  111,  108,  107,  106,  105,
      104,  102,   99,   98,   96,   95,   94,   90,   69,   46,
       45,   41,   39,   38,   37,   35,   30,   29,   22,   15,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,

      351,  351,  351
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[85] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int scope_optimizer__flex_debug;
int scope_optimizer__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scope_optimizer_text;

// Avoid spam output
#ifdef  ECHO
#undef  ECHO
#endif
#define ECHO

// Return values for lambda state
#define __IDENTIFIER 900

// Never exit
#ifdef  YY_FATAL_ERROR
#undef  YY_FATAL_ERROR
#endif
#define YY_FATAL_ERROR(msg)

#include <vector>
#include <string>

struct ScopeEntry {
    std::string str;
    int         line;

    ScopeEntry() : line(-1) {}
    void clear() {
        line = -1;
        str.clear();
    }
};

static std::vector<ScopeEntry> scope_stack;
static ScopeEntry              current_scope;
static int                     current_state       = 0;
static int                     current_brace_depth = 1;
static std::string             catch_for_scope;
static void consume_lambda_signature();

#define PUSH_SCOPE(scope) {\
    if(scope.line == -1)\
        scope.line = scope_optimizer_lineno;\
    scope_stack.push_back(scope);\
}

#define INITIAL 0
#define PRE_PROCESSOR_STATE 1
#define CATCH_STATE 2
#define FOR_STATE 3
#define C_COMMENT_STATE 4
#define CPP_COMMENT_STATE 5
#define LAMBDA_STATE 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scope_optimizer_lex_destroy (void );

int scope_optimizer_get_debug (void );

void scope_optimizer_set_debug (int debug_flag  );

YY_EXTRA_TYPE scope_optimizer_get_extra (void );

void scope_optimizer_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *scope_optimizer_get_in (void );

void scope_optimizer_set_in  (FILE * in_str  );

FILE *scope_optimizer_get_out (void );

void scope_optimizer_set_out  (FILE * out_str  );

yy_size_t scope_optimizer_get_leng (void );

char *scope_optimizer_get_text (void );

int scope_optimizer_get_lineno (void );

void scope_optimizer_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scope_optimizer_wrap (void );
#else
extern int scope_optimizer_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( scope_optimizer_text, scope_optimizer_leng, 1, scope_optimizer_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scope_optimizer_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scope_optimizer_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scope_optimizer_in))==0 && ferror(scope_optimizer_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scope_optimizer_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scope_optimizer_lex (void);

#define YY_DECL int scope_optimizer_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scope_optimizer_text and scope_optimizer_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scope_optimizer_in )
			scope_optimizer_in = stdin;

		if ( ! scope_optimizer_out )
			scope_optimizer_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scope_optimizer_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scope_optimizer__create_buffer(scope_optimizer_in,YY_BUF_SIZE );
		}

		scope_optimizer__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scope_optimizer_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 352 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 651 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < scope_optimizer_leng; ++yyl )
				if ( scope_optimizer_text[yyl] == '\n' )
					   
    scope_optimizer_lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
    BEGIN(CPP_COMMENT_STATE);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    BEGIN(C_COMMENT_STATE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{current_scope.str += " ";}
	YY_BREAK
case 4:
YY_RULE_SETUP
{current_scope.str += " ";}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{current_scope.str += " ";}
	YY_BREAK
case 6:
YY_RULE_SETUP
{catch_for_scope += " ";}
	YY_BREAK
case 7:
YY_RULE_SETUP
{catch_for_scope += " ";}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
{catch_for_scope += " ";}
	YY_BREAK
case 9:
YY_RULE_SETUP
{catch_for_scope += " ";}
	YY_BREAK
case 10:
YY_RULE_SETUP
{catch_for_scope += " ";}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{catch_for_scope += " ";}
	YY_BREAK
case 12:
YY_RULE_SETUP
{/* eat a string */}
	YY_BREAK
case 13:
YY_RULE_SETUP
{/* eat a string */}
	YY_BREAK
case 14:
YY_RULE_SETUP
{BEGIN(PRE_PROCESSOR_STATE);}
	YY_BREAK
case 15:
YY_RULE_SETUP
{} /* continue same state on next line */
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{BEGIN(current_state);}
	YY_BREAK
case 17:
YY_RULE_SETUP
{} /* consume it */
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    current_state = CATCH_STATE;
    catch_for_scope.clear();
    BEGIN(CATCH_STATE);
} 
	YY_BREAK
case 19:
YY_RULE_SETUP
{catch_for_scope += ";";}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    catch_for_scope += ";"; 
    current_state = INITIAL; 
    BEGIN(INITIAL);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
    // default keep the current token
    catch_for_scope += scope_optimizer_text;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    current_state = FOR_STATE;
    BEGIN(FOR_STATE);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
    BEGIN(LAMBDA_STATE);
    consume_lambda_signature();
    BEGIN(INITIAL);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
    return __IDENTIFIER;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
    return scope_optimizer_text[0];
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
    current_brace_depth++;
    catch_for_scope += scope_optimizer_text;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
    current_brace_depth--;
    if(current_brace_depth == 0) {
        current_state = INITIAL; 
        catch_for_scope += ";";
        current_brace_depth = 1;
        BEGIN(INITIAL);
    } else {
        catch_for_scope += scope_optimizer_text;
    }
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
    // default keep the current token
    catch_for_scope += scope_optimizer_text;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
    current_scope.str += "(";
    if(current_scope.str.empty() == false) {
        PUSH_SCOPE(current_scope);
    }
    current_scope.clear();
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
    if ( !scope_stack.empty() ) {
        current_scope = scope_stack.back();
        scope_stack.pop_back();
        
        current_scope.str += ")";
    } else {
        current_scope.clear();
    }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
    current_scope.str += "{";
    PUSH_SCOPE(current_scope);
    current_scope.clear();
    
    if(catch_for_scope.empty() == false)
        current_scope.str += catch_for_scope;
    catch_for_scope.clear();
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
    if ( !scope_stack.empty() ) {
        current_scope = scope_stack.back();
        
        scope_stack.pop_back();
        current_scope.str += "}";
    } else {
        current_scope.clear();
    }
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{current_scope.str += scope_optimizer_text;}
	YY_BREAK
case 34:
YY_RULE_SETUP
{}
	YY_BREAK
case 35:
YY_RULE_SETUP
{}
	YY_BREAK
case 36:
YY_RULE_SETUP
{}
	YY_BREAK
case 37:
YY_RULE_SETUP
{}
	YY_BREAK
case 38:
YY_RULE_SETUP
{}
	YY_BREAK
case 39:
YY_RULE_SETUP
{}
	YY_BREAK
case 40:
YY_RULE_SETUP
{}
	YY_BREAK
case 41:
YY_RULE_SETUP
{}
	YY_BREAK
case 42:
YY_RULE_SETUP
{}
	YY_BREAK
case 43:
YY_RULE_SETUP
{}
	YY_BREAK
case 44:
YY_RULE_SETUP
{}
	YY_BREAK
case 45:
YY_RULE_SETUP
{}
	YY_BREAK
case 46:
YY_RULE_SETUP
{}
	YY_BREAK
case 47:
YY_RULE_SETUP
{}
	YY_BREAK
case 48:
YY_RULE_SETUP
{}
	YY_BREAK
case 49:
YY_RULE_SETUP
{}
	YY_BREAK
case 50:
YY_RULE_SETUP
{}
	YY_BREAK
case 51:
YY_RULE_SETUP
{}
	YY_BREAK
case 52:
YY_RULE_SETUP
{}
	YY_BREAK
case 53:
YY_RULE_SETUP
{}
	YY_BREAK
case 54:
YY_RULE_SETUP
{}
	YY_BREAK
case 55:
YY_RULE_SETUP
{}
	YY_BREAK
case 56:
YY_RULE_SETUP
{}
	YY_BREAK
case 57:
YY_RULE_SETUP
{}
	YY_BREAK
case 58:
YY_RULE_SETUP
{ current_scope.str += scope_optimizer_text; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ current_scope.str += scope_optimizer_text; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ current_scope.str += scope_optimizer_text; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{}
	YY_BREAK
case 62:
YY_RULE_SETUP
{}
	YY_BREAK
case 63:
YY_RULE_SETUP
{}
	YY_BREAK
case 64:
YY_RULE_SETUP
{}
	YY_BREAK
case 65:
YY_RULE_SETUP
{}
	YY_BREAK
case 66:
YY_RULE_SETUP
{}
	YY_BREAK
case 67:
YY_RULE_SETUP
{}
	YY_BREAK
case 68:
YY_RULE_SETUP
{}
	YY_BREAK
case 69:
YY_RULE_SETUP
{}
	YY_BREAK
case 70:
YY_RULE_SETUP
{}
	YY_BREAK
case 71:
YY_RULE_SETUP
{}
	YY_BREAK
case 72:
YY_RULE_SETUP
{}
	YY_BREAK
case 73:
YY_RULE_SETUP
{}
	YY_BREAK
case 74:
YY_RULE_SETUP
{}
	YY_BREAK
case 75:
YY_RULE_SETUP
{}
	YY_BREAK
case 76:
YY_RULE_SETUP
{ current_scope.str += scope_optimizer_text; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ current_scope.str += scope_optimizer_text; }
	YY_BREAK
case 78:
case 79:
YY_RULE_SETUP
{
    if(catch_for_scope.empty() == false)
        catch_for_scope.clear();
        
    // default keep the current token
    current_scope.str += scope_optimizer_text;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
    BEGIN(current_state);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    BEGIN(current_state);
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PRE_PROCESSOR_STATE):
case YY_STATE_EOF(CATCH_STATE):
case YY_STATE_EOF(FOR_STATE):
case YY_STATE_EOF(C_COMMENT_STATE):
case YY_STATE_EOF(CPP_COMMENT_STATE):
case YY_STATE_EOF(LAMBDA_STATE):
{
    if(current_scope.str.empty() == false) {
        PUSH_SCOPE(current_scope);
        current_scope.clear();
    }
    yyterminate();
}
	YY_BREAK
case 84:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scope_optimizer_in at a new source and called
			 * scope_optimizer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scope_optimizer_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scope_optimizer_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scope_optimizer_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scope_optimizer_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					scope_optimizer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scope_optimizer_restart(scope_optimizer_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scope_optimizer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 352 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 352 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 351);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scope_optimizer_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --scope_optimizer_lineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scope_optimizer_restart(scope_optimizer_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scope_optimizer_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scope_optimizer_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    scope_optimizer_lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scope_optimizer_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scope_optimizer_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scope_optimizer__create_buffer(scope_optimizer_in,YY_BUF_SIZE );
	}

	scope_optimizer__init_buffer(YY_CURRENT_BUFFER,input_file );
	scope_optimizer__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scope_optimizer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scope_optimizer_pop_buffer_state();
	 *		scope_optimizer_push_buffer_state(new_buffer);
     */
	scope_optimizer_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scope_optimizer__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scope_optimizer_wrap()) processing, but the only time this flag
	 * is looked at is after scope_optimizer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scope_optimizer__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scope_optimizer_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scope_optimizer__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scope_optimizer_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scope_optimizer__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scope_optimizer_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scope_optimizer__create_buffer()" );

	b->yy_is_our_buffer = 1;

	scope_optimizer__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scope_optimizer__create_buffer()
 * 
 */
    void scope_optimizer__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scope_optimizer_free((void *) b->yy_ch_buf  );

	scope_optimizer_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scope_optimizer_restart() or at EOF.
 */
    static void scope_optimizer__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scope_optimizer__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scope_optimizer__init_buffer was _probably_
     * called from scope_optimizer_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scope_optimizer__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scope_optimizer__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scope_optimizer_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scope_optimizer_ensure_buffer_stack();

	/* This block is copied from scope_optimizer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scope_optimizer__switch_to_buffer. */
	scope_optimizer__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scope_optimizer_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scope_optimizer__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scope_optimizer__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scope_optimizer_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scope_optimizer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scope_optimizer_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scope_optimizer_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scope_optimizer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scope_optimizer__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scope_optimizer_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scope_optimizer__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scope_optimizer__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scope_optimizer_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scope_optimizer__scan_bytes() instead.
 */
YY_BUFFER_STATE scope_optimizer__scan_string (yyconst char * yystr )
{
    
	return scope_optimizer__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scope_optimizer_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scope_optimizer__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scope_optimizer_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scope_optimizer__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scope_optimizer__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scope_optimizer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scope_optimizer_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scope_optimizer_text[scope_optimizer_leng] = (yy_hold_char); \
		(yy_c_buf_p) = scope_optimizer_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scope_optimizer_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scope_optimizer_get_lineno  (void)
{
        
    return scope_optimizer_lineno;
}

/** Get the input stream.
 * 
 */
FILE *scope_optimizer_get_in  (void)
{
        return scope_optimizer_in;
}

/** Get the output stream.
 * 
 */
FILE *scope_optimizer_get_out  (void)
{
        return scope_optimizer_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t scope_optimizer_get_leng  (void)
{
        return scope_optimizer_leng;
}

/** Get the current token.
 * 
 */

char *scope_optimizer_get_text  (void)
{
        return scope_optimizer_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scope_optimizer_set_lineno (int  line_number )
{
    
    scope_optimizer_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scope_optimizer__switch_to_buffer
 */
void scope_optimizer_set_in (FILE *  in_str )
{
        scope_optimizer_in = in_str ;
}

void scope_optimizer_set_out (FILE *  out_str )
{
        scope_optimizer_out = out_str ;
}

int scope_optimizer_get_debug  (void)
{
        return scope_optimizer__flex_debug;
}

void scope_optimizer_set_debug (int  bdebug )
{
        scope_optimizer__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scope_optimizer_lex_destroy(), so don't allocate here.
     */

    /* We do not touch scope_optimizer_lineno unless the option is enabled. */
    scope_optimizer_lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scope_optimizer_in = stdin;
    scope_optimizer_out = stdout;
#else
    scope_optimizer_in = (FILE *) 0;
    scope_optimizer_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scope_optimizer_lex_init()
     */
    return 0;
}

/* scope_optimizer_lex_destroy is for both reentrant and non-reentrant scanners. */
int scope_optimizer_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scope_optimizer__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scope_optimizer_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	scope_optimizer_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scope_optimizer_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scope_optimizer_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scope_optimizer_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scope_optimizer_free (void * ptr )
{
	free( (char *) ptr );	/* see scope_optimizer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scope_optimizer_wrap() {
    return 1; 
}

static void consume_lambda_signature() {
    int depth = 1;
    catch_for_scope += ";";
    std::string curarg;
    while(true) {
        int rc = scope_optimizer_lex();
        if(rc == 0) break;
        switch(rc) {
        case '<': 
            ++depth;
            curarg += "< ";
            break;
        case '>':
            --depth;
            curarg += "> ";
            break;
        case '(':
            ++depth;
            curarg += ")";
            break;
        case ')':
            --depth;
            if(depth == 0) {
                if(!curarg.empty()) {
                    curarg += ";";
                    catch_for_scope += curarg;
                }
                return;
            } else {
                curarg += ")";
            }
            break;
        case ',':
            if(depth == 1) {
                curarg += ";";
                catch_for_scope += curarg;
                curarg.clear();
            } else {
                curarg += ",";
            }
            break;
        default:
            curarg += scope_optimizer_text;
            break;
        }
    }
}

void scope_optimizer_clean()
{
    scope_optimizer__flush_buffer(YY_CURRENT_BUFFER);
    scope_optimizer__delete_buffer(YY_CURRENT_BUFFER);
    
    scope_stack.clear();
    current_scope.clear();
    current_state = INITIAL;
    current_brace_depth = 1;
    catch_for_scope.clear();
}

int OptimizeScope(const std::string &inputScope, std::string &optimizedScope, int localsLine, std::string &localsScope)
{
    BEGIN 0;
    scope_optimizer__scan_string(inputScope.c_str());
    
    int rc = scope_optimizer_lex();
    if (scope_stack.empty()) {
        optimizedScope = inputScope;
        scope_optimizer_clean();
        return rc;
    }
    
    std::string tmp_scope;
    for (size_t i = 0; i < scope_stack.size(); i++) {
        tmp_scope += scope_stack.at(i).str;
        if(scope_stack.at(i).line >= localsLine) {
            localsScope += scope_stack.at(i).str;
        }
    }

    // if the current scope is not empty, terminate it with ';' and return
    if ( tmp_scope.empty() == false ) {
        tmp_scope  += ";";
        optimizedScope = tmp_scope;
    }
    scope_optimizer_clean();
    return rc;
}

