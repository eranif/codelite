
#line 3 "CxxLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 166
#define YY_END_OF_BUFFER 167
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[644] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      164,  164,  167,  131,   87,   89,   88,  131,  131,  130,
      131,  131,  131,  131,  131,  131,  131,  131,   91,   90,
      131,  131,  131,  131,  129,  129,  131,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  131,  162,  134,
      135,  162,  162,  162,  162,  162,  158,  157,  152,  150,
      161,  161,  162,  161,  161,  161,  161,  161,  161,  162,
      166,  128,  127,  128,  123,  122,  123,  164,  163,  166,
       87,   89,    0,   88,  104,    0,  119,    0,  109,  105,

      114,    0,    0,  107,   98,  110,   99,  111,   96,   94,
        0,   93,  120,  124,  108,   93,   91,    0,    0,   91,
       91,    0,   90,   90,   90,   95,  100,  101,  103,  102,
        0,  129,    0,    0,  115,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,   25,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,   39,  129,
      129,  129,  129,  129,  129,  129,  129,   51,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  116,  106,  134,
        0,  156,    0,  148,    0,    0,  160,  160,  158,    0,

        0,  158,  158,    0,  157,  157,  157,  153,  151,  161,
        0,    0,  132,    0,  161,  161,  161,  161,  138,  161,
      161,  161,  161,  149,  125,    0,  121,  164,    0,    0,
        0,  118,    0,    0,   97,  117,    0,   93,    0,   93,
       91,   92,   90,  112,  113,  129,    3,    5,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
       36,  129,  129,  129,   41,  129,  129,  129,   45,  129,
       47,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,   73,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   85,    0,    0,  155,    0,    0,    0,  160,    0,
      160,  158,  159,  157,  133,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  126,  165,    0,    0,
        0,    0,    0,   93,   92,   92,  129,  129,    6,  129,
      129,    9,  129,   11,  129,   13,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   28,   29,  129,  129,  129,
      129,  129,  129,  129,   38,  129,   42,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,   69,  129,

      129,   72,  129,  129,  129,  129,  129,   81,  129,  129,
      129,  129,    0,    0,    0,    0,    0,  160,  159,  159,
      161,  142,  141,  161,  161,  161,  161,  161,  144,  161,
      161,    0,    0,    0,    0,   92,  129,  129,  129,    8,
       10,   12,  129,  129,   16,   17,   18,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   33,   34,   35,  129,
      129,  129,  129,  129,  129,  129,  129,   52,  129,  129,
      129,  129,  129,  129,  129,   60,  129,  129,  129,  129,
      129,  129,  129,   71,  129,  129,  129,   77,  129,   79,
      129,  129,  129,   84,  129,    0,    0,    0,    0,  159,

      161,  143,  147,  139,  161,  161,  161,  146,  129,  129,
        4,    7,  129,  129,  129,  129,  129,  129,  129,   24,
       26,  129,  129,   31,   32,   37,   40,  129,  129,  129,
       48,  129,  129,  129,  129,  129,   56,  129,  129,   59,
       61,   62,   63,   66,   67,  129,  129,  129,   75,  129,
      129,  129,  129,  129,   86,  136,  140,  161,  145,    1,
        2,  129,  129,  129,  129,  129,  129,   23,  129,  129,
       43,  129,  129,   49,  129,  129,   54,  129,  129,  129,
      129,  129,  129,   74,  129,  129,   80,  129,   83,  137,
      154,   14,   15,  129,  129,   21,   22,  129,   30,  129,

       46,   50,   53,  129,   57,  129,  129,  129,   68,  129,
       76,   78,   82,  129,   19,  129,   44,   55,  129,  129,
      129,  129,   20,  129,  129,  129,  129,  129,  129,  129,
      129,   65,  129,   27,  129,  129,   70,  129,   64,  129,
      129,   58,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        5,    6,    7,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8,    9,   10,   11,    1,   12,   13,   14,    1,
        1,   15,   16,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   24,   25,   24,   26,   26,   27,    1,   28,
       29,   30,   31,    1,   32,   32,   32,   32,   33,   34,
       35,   35,   35,   35,   35,   36,   35,   35,   35,   35,
       35,   35,   35,   35,   37,   35,   35,   38,   35,   35,
        1,   39,    1,   40,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   35,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    1,   67,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    2,    1,    4,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    6,    6,    7,    1,    1,    1,    1,
        4,    8,    8,    7,    9,   10,    9,    9,    4,    1,
        9,   11,   11,    8,    8,    8,    6,    9,    9,    9,
        9,   10,    9,   12,    9,    9,    9,   12,    9,   12,
        9,   12,    9,   12,    9,    9,    1
    } ;

static yyconst flex_int16_t yy_base[668] =
    {   0,
        0,    0,   67,    0,    0,    0,  131,  132,  133,  134,
      136,  147, 1248, 1249,  155, 1249,  173, 1218,  133, 1249,
     1217,  139, 1206, 1215,  125,  136,  167,  154,  176,  223,
     1216,  175, 1213,  176,    0,  197, 1212,  156,  166,  177,
      187,  166,  212, 1185,  120, 1184, 1177,  211,  169,   84,
     1191,  227,  233,  180,  200,  214, 1181,  194, 1249,  278,
     1249,  226, 1222, 1195,  279, 1214,  288,  335, 1203, 1202,
        0,  264,  231, 1184,  264,  241, 1179, 1170, 1173, 1159,
     1249, 1249, 1249,  264, 1249, 1249, 1206,  286, 1249,    0,
      324, 1249,  338,  359, 1249,  297, 1249,  353, 1249, 1249,

     1249,  278,  368, 1249, 1249, 1249, 1249, 1249, 1209, 1249,
     1205,  413, 1249, 1249, 1249,    0,  255,  377,  404,  236,
      287,    0,    0,  259,  299, 1249, 1193, 1249, 1249, 1249,
     1192,    0,  340, 1181, 1249, 1169, 1173, 1164, 1156, 1155,
     1159, 1167,  278, 1170, 1169,  294,  360, 1149, 1155, 1149,
     1146,  324, 1154, 1151, 1149, 1145, 1152, 1141,    0,  334,
     1146, 1139, 1145, 1134,  323, 1144, 1149, 1153, 1147,  356,
     1149,  392, 1136,  267,  312, 1140, 1136,  355,  353, 1132,
       97, 1137, 1128,  134, 1136, 1134, 1125, 1249, 1249,  448,
      405, 1249,  446, 1249,  402,  452,  497,    0,  344,  460,

      474,  348,  409,    0,    0,  382,  412, 1249, 1249,    0,
      448, 1143, 1249, 1177, 1133,  372, 1134, 1120,  409, 1133,
     1122, 1133, 1129, 1249, 1249, 1169, 1249,  454,  478,  514,
        0, 1249,  534,    0, 1249, 1249,  544, 1249,  554,  493,
     1249,  489, 1249, 1249, 1249, 1124, 1130,    0, 1115,  437,
     1117, 1126, 1121, 1122, 1107, 1105, 1107,  442, 1110, 1119,
     1114, 1116, 1116, 1111, 1103,  452, 1109, 1095, 1111, 1110,
        0, 1105, 1095, 1099,    0, 1100, 1105, 1100,    0, 1081,
     1103, 1091, 1084, 1095, 1082, 1077, 1078, 1085, 1086, 1081,
     1073, 1075, 1078, 1085, 1070, 1068, 1068, 1071, 1067,  457,

     1079,    0, 1078, 1068, 1072, 1067, 1060, 1074, 1076, 1075,
     1064, 1074,  561,    0, 1249,  573,    0,  585, 1249,  593,
      586, 1249,  587, 1249, 1249, 1064, 1066, 1066, 1061, 1055,
     1063, 1063, 1055, 1060, 1057, 1058, 1249,  479,  620,  650,
      641,  684,  712,  600,  491,  510, 1049, 1056,    0, 1047,
     1042,    0, 1048,    0, 1049,  490, 1038, 1044, 1035, 1044,
     1033, 1031, 1031, 1038, 1036,    0,    0, 1038, 1029, 1028,
     1039, 1032, 1023, 1028,    0, 1027,    0, 1037, 1020, 1034,
     1031, 1020, 1033, 1017, 1015, 1030, 1025, 1020, 1010, 1008,
     1009, 1006, 1019, 1009, 1013, 1018, 1017, 1008,    0, 1017,

      995,    0,  497, 1003, 1008, 1007,  993,    0,  993,  994,
     1005, 1004,  729,  759,  750,  793,  720,  667,  566,  536,
      995,    0,    0, 1001,  989,  999,  999,  983,    0,  990,
      994,  553,    0,  590,    0, 1249,  595,  983,  991,    0,
        0,    0, 1010, 1009,    0,    0,  580,  976,  961,  973,
      974,  973,  964,  969,  949,  954,    0,    0,    0,  958,
      956,  945,  940,  944,  932,  928,  927,    0,  931,  920,
      935,  934,  913,  926,  912,    0,  920,  917,  919,  897,
      907,  913,  909,    0,  895,  895,  882,    0,  868,    0,
      868,  843,  850,    0,  822,  589,    0,  617,    0, 1249,

      788,    0,    0,    0,  786,  786,  788,    0,  770,  781,
        0,    0,  783,  782,  778,  757,  759,  756,  751,    0,
        0,  766,  759,    0,    0,    0,    0,  762,  758,  743,
        0,  739,  741,  750,  748,  730,    0,  742,  729,    0,
        0,    0,  745,    0,    0,  718,  736,  729,    0,  714,
      720,  713,  711,  702,    0,  716,    0,  714,    0,    0,
        0,  699,  698,  715,  700,  709,  702,    0,  706,  665,
        0,  680,  662,    0,  663,  674,    0,  669,  655,  656,
      547,  665,  650,    0,  654,  654,    0,  645,    0,    0,
        0,    0,    0,  631,  630,    0,    0,  643,    0,  640,

        0,    0,    0,  640,    0,  623,  620,  636,    0,  622,
        0,    0,    0,  609,    0,  626,    0,    0,  621,  599,
      598,  610,    0,  594,  591,  603,  586,  593,  572,  584,
      532,    0,  480,    0,  471,  454,    0,  463,    0,  192,
      135,    0, 1249,  840,  852,  864,  876,  888,  895,  907,
      919,  926,  938,  947,  956,  963,  971,  980,  987,  993,
      999, 1005, 1010, 1016, 1022, 1027, 1032
    } ;

static yyconst flex_int16_t yy_def[668] =
    {   0,
      643,    1,  643,    3,  644,  644,  645,  645,  646,  646,
      644,  644,  643,  643,  643,  643,  643,  643,  647,  643,
      643,  643,  648,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  649,  649,  643,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  643,  643,  643,
      643,  650,  643,  651,  643,  643,  643,  643,  643,  643,
      652,  652,  643,  652,  652,  652,  652,  652,  652,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  653,
      643,  643,  643,  643,  643,  647,  643,  654,  643,  643,

      643,  648,  655,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  112,   29,  643,  643,  643,
      643,  656,   30,  643,  643,  643,  643,  643,  643,  643,
      643,  649,  647,  648,  643,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  643,  643,  643,
      650,  643,  657,  643,  651,  658,  643,  197,   67,  643,

      643,  643,  643,  659,   68,  643,  643,  643,  643,  652,
      650,  651,  643,  643,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  643,  643,  643,  643,  643,  653,  647,
      660,  643,  648,  661,  643,  643,  643,  643,  643,  662,
      643,  656,  643,  643,  643,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  650,  663,  643,  651,  664,  643,  643,  643,
      665,  643,  659,  643,  643,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  643,  653,  647,  647,
      648,  648,  643,  666,  643,  643,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  650,  650,  651,  651,  643,  667,  643,  643,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  647,  340,  648,  342,  643,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  650,  414,  651,  416,  643,

      652,  652,  652,  652,  652,  652,  652,  652,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  652,  652,  652,  652,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  652,
      652,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,    0,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643
    } ;

static yyconst flex_int16_t yy_nxt[1317] =
    {   0,
       14,   14,   15,   16,   17,   17,   17,   15,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   30,   30,   30,   30,   30,   31,   32,   33,   34,
       14,   35,   35,   35,   35,   36,   35,   35,   14,   37,
       35,   38,   39,   40,   41,   42,   43,   44,   35,   45,
       35,   46,   47,   48,   49,   50,   35,   51,   52,   53,
       54,   55,   56,   57,   35,   35,   58,   59,   60,   60,
       61,   60,   59,   60,   60,   59,   62,   59,   59,   63,
       64,   59,   59,   59,   65,   66,   67,   68,   68,   68,
       68,   68,   68,   59,   69,   59,   70,   59,   71,   71,

       71,   71,   72,   71,   71,   73,   59,   71,   71,   71,
       71,   74,   75,   71,   71,   71,   76,   71,   77,   71,
       71,   71,   78,   71,   71,   71,   71,   79,   71,   71,
       71,   71,   71,   80,   83,   83,   86,   86,   88,   89,
      105,  170,   97,   88,  171,   90,  304,   87,   87,   88,
       89,  100,  107,  106,   88,  305,   90,   91,   92,   93,
       93,   93,   91,   90,  108,  109,  159,  101,  113,   84,
       84,   98,  114,  160,   90,   93,   92,   94,   94,   94,
       93,  110,  115,  308,  111,  309,  112,  112,  112,  112,
      112,  112,  112,  116,  642,  117,  117,  117,  117,  117,

      117,  118,  127,  128,  130,  131,  133,  136,  119,  137,
      134,  120,  121,  122,  138,  140,  139,  150,  143,  151,
      141,  119,  188,  142,  167,  144,  168,  120,  145,  152,
      169,  146,  147,  181,  213,  192,  121,  214,  182,  122,
      116,  148,  123,  123,  123,  123,  123,  123,  123,  183,
      641,  149,  163,  153,  184,  119,  164,  185,  124,  125,
      189,  154,  186,  155,  193,  165,  156,  225,  119,  157,
      226,  166,  241,  211,  124,  173,  174,  212,  177,  190,
      190,  178,  190,  125,  190,  190,  175,  219,  228,  176,
      179,  232,  643,  228,  220,  243,  241,  180,  197,  197,

      197,  197,  197,  197,  197,  198,   97,  199,  199,  199,
      199,  199,  199,  200,  293,  216,  103,  217,  643,  243,
      201,  218,  241,  202,  203,  204,   91,   92,   93,   93,
       93,   91,  294,  201,  243,   98,  253,  254,  241,  202,
       93,   92,   93,   93,   93,   93,  257,  258,  203,   97,
      243,  204,  198,  295,  205,  205,  205,  205,  205,  205,
      205,   93,   92,   94,   94,   94,   93,  201,  280,  296,
      206,  207,  230,  230,  230,  230,  230,  230,   98,  266,
      201,  643,  281,  267,  322,  274,  206,  233,  233,  233,
      233,  233,  233,  275,  116,  207,  118,  118,  118,  118,

      118,  118,  118,  259,  299,  286,  260,  643,  322,  119,
      287,  261,  300,  301,  192,  315,  231,  302,  324,  239,
      239,  327,  119,  240,  240,  240,  240,  240,  240,  240,
      328,  234,  112,  112,  112,  112,  112,  112,  112,  289,
      196,  290,  324,  193,  322,  237,  238,  324,  238,  190,
      190,  291,  190,  331,  190,  190,  228,  192,  237,  238,
      322,  228,  332,  324,  238,  313,  313,  313,  313,  313,
      313,  316,  316,  316,  316,  316,  316,  198,  350,  200,
      200,  200,  200,  200,  200,  200,  193,  338,  338,  320,
      320,  351,  201,  321,  321,  321,  321,  321,  321,  321,

      359,  360,  400,  368,  640,  201,  369,  338,  338,  314,
      443,  401,  444,  639,  638,  317,  197,  197,  197,  197,
      197,  197,  197,   97,  345,  346,  238,  436,  238,  318,
      319,  637,  319,  339,  339,  339,  339,  339,  339,  238,
      345,  485,  318,  319,  238,  436,  486,  232,  319,  346,
      487,  436,   98,  341,  341,  341,  341,  341,  341,  343,
      343,  436,   97,  344,  344,  344,  344,  344,  344,  344,
      192,  500,  103,  240,  240,  240,  240,  240,  240,  240,
      413,  413,  413,  413,  413,  413,  315,  500,  607,  636,
      608,   98,  415,  415,  415,  415,  415,  415,  192,  193,

      417,  417,  500,  232,  418,  418,  418,  418,  418,  418,
      418,  196,  321,  321,  321,  321,  321,  321,  321,  319,
      515,  319,  419,  420,  635,  516,  500,  193,  103,   97,
      315,  634,  319,  238,  633,  238,  509,  319,  419,  432,
      432,  432,  432,  432,  432,  632,  238,  420,  631,  510,
      630,  238,  629,  628,  232,  196,  627,  626,   98,   97,
      434,  434,  434,  434,  434,  434,  625,  624,  623,  433,
      433,  433,  433,  433,  433,  433,  622,  621,  620,  103,
      619,  433,  433,  433,  618,  617,  616,  615,   98,  614,
      613,  433,  433,  433,  433,  433,  433,  232,  612,  611,

      319,  610,  319,  435,  435,  435,  435,  435,  435,  435,
      609,  606,  605,  319,  604,  435,  435,  435,  319,  603,
      602,  601,  103,  600,  599,  435,  435,  435,  435,  435,
      435,  344,  344,  344,  344,  344,  344,  344,  192,  418,
      418,  418,  418,  418,  418,  418,  598,  597,  496,  496,
      496,  496,  496,  496,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  315,  587,  586,  585,  193,  192,  498,
      498,  498,  498,  498,  498,  584,  583,  582,  497,  497,
      497,  497,  497,  497,  497,  581,  580,  579,  196,  578,
      497,  497,  497,  577,  576,  575,  574,  193,  573,  572,

      497,  497,  497,  497,  497,  497,  315,  571,  570,  569,
      568,  567,  499,  499,  499,  499,  499,  499,  499,  566,
      565,  564,  563,  562,  499,  499,  499,  561,  560,  559,
      558,  196,  557,  556,  499,  499,  499,  499,  499,  499,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   96,   96,  555,   96,
       96,   96,   96,   96,   96,   96,   96,   96,  102,  102,
      554,  102,  553,  102,  102,  102,  102,  102,  102,  102,

      132,  132,  132,  132,  132,  132,  132,  191,  191,  552,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  195,
      195,  551,  195,  550,  195,  195,  195,  195,  195,  195,
      195,  210,  210,  210,  210,  210,  210,  210,  229,  549,
      548,  229,  229,  229,  229,  229,  229,  229,  229,  229,
       96,   96,   96,  547,  546,  545,  544,   96,   96,  102,
      102,  102,  543,  542,  541,  540,  102,  102,  242,  242,
      242,  539,  538,  242,  191,  191,  191,  537,  536,  535,
      534,  191,  191,  195,  195,  195,  533,  532,  531,  530,
      195,  195,  323,  323,  323,  529,  528,  323,  340,  340,

      340,  527,  526,  340,  342,  342,  342,  525,  524,  342,
      240,  240,  523,  522,  240,  414,  414,  414,  521,  520,
      414,  416,  416,  416,  519,  518,  416,  321,  321,  517,
      514,  321,  344,  344,  513,  512,  344,  418,  418,  511,
      508,  418,  507,  506,  505,  504,  503,  502,  501,  495,
      494,  493,  492,  491,  490,  489,  488,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  445,  442,  441,  440,

      439,  438,  437,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  367,  366,  365,  364,  363,
      362,  361,  358,  357,  356,  355,  354,  353,  352,  349,
      348,  347,  337,  336,  335,  334,  333,  330,  329,  326,
      325,  196,  312,  311,  310,  307,  306,  303,  298,  297,
      292,  288,  285,  284,  283,  282,  279,  278,  277,  276,

      273,  272,  271,  270,  269,  268,  265,  264,  263,  262,
      256,  255,  252,  251,  250,  249,  248,  247,  246,  103,
      245,  244,  236,  235,  227,  224,  223,  222,  221,  215,
      209,  208,  114,  196,  194,  187,  172,  162,  161,  158,
      135,  129,  126,  104,  103,   99,   95,  643,   13,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643
    } ;

static yyconst flex_int16_t yy_chk[1317] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    8,    9,   10,   11,   11,
       25,   50,   19,   11,   50,   11,  181,    9,   10,   12,
       12,   22,   26,   25,   12,  181,   12,   15,   15,   15,
       15,   15,   15,   11,   26,   26,   45,   22,   28,    7,
        8,   19,   28,   45,   12,   17,   17,   17,   17,   17,
       17,   27,   28,  184,   27,  184,   27,   27,   27,   27,
       27,   27,   27,   29,  641,   29,   29,   29,   29,   29,

       29,   29,   32,   32,   34,   34,   36,   38,   29,   38,
       36,   29,   29,   29,   38,   39,   38,   42,   40,   42,
       39,   29,   58,   39,   49,   40,   49,   29,   40,   42,
       49,   40,   41,   54,   73,   62,   29,   73,   54,   29,
       30,   41,   30,   30,   30,   30,   30,   30,   30,   55,
      640,   41,   48,   43,   55,   30,   48,   56,   30,   30,
       58,   43,   56,   43,   62,   48,   43,   84,   30,   43,
       84,   48,  120,   72,   30,   52,   52,   72,   53,   60,
       60,   53,   60,   30,   60,   60,   52,   76,   88,   52,
       53,  102,  117,   88,   76,  124,  120,   53,   65,   65,

       65,   65,   65,   65,   65,   67,   96,   67,   67,   67,
       67,   67,   67,   67,  174,   75,  102,   75,  117,  124,
       67,   75,  121,   67,   67,   67,   91,   91,   91,   91,
       91,   91,  174,   67,  125,   96,  143,  143,  121,   67,
       93,   93,   93,   93,   93,   93,  146,  146,   67,  133,
      125,   67,   68,  175,   68,   68,   68,   68,   68,   68,
       68,   94,   94,   94,   94,   94,   94,   68,  165,  175,
       68,   68,   98,   98,   98,   98,   98,   98,  133,  152,
       68,  199,  165,  152,  202,  160,   68,  103,  103,  103,
      103,  103,  103,  160,  118,   68,  118,  118,  118,  118,

      118,  118,  118,  147,  178,  170,  147,  199,  202,  118,
      170,  147,  178,  179,  191,  195,   98,  179,  206,  119,
      119,  216,  118,  119,  119,  119,  119,  119,  119,  119,
      216,  103,  112,  112,  112,  112,  112,  112,  112,  172,
      195,  172,  206,  191,  203,  112,  112,  207,  112,  190,
      190,  172,  190,  219,  190,  190,  228,  211,  112,  112,
      203,  228,  219,  207,  112,  193,  193,  193,  193,  193,
      193,  196,  196,  196,  196,  196,  196,  200,  250,  200,
      200,  200,  200,  200,  200,  200,  211,  229,  338,  201,
      201,  250,  200,  201,  201,  201,  201,  201,  201,  201,

      258,  258,  300,  266,  638,  200,  266,  229,  338,  193,
      356,  300,  356,  636,  635,  196,  197,  197,  197,  197,
      197,  197,  197,  230,  242,  242,  240,  345,  240,  197,
      197,  633,  197,  230,  230,  230,  230,  230,  230,  240,
      242,  403,  197,  197,  240,  346,  403,  233,  197,  242,
      403,  345,  230,  233,  233,  233,  233,  233,  233,  237,
      237,  346,  432,  237,  237,  237,  237,  237,  237,  237,
      313,  420,  233,  239,  239,  239,  239,  239,  239,  239,
      313,  313,  313,  313,  313,  313,  316,  420,  581,  631,
      581,  432,  316,  316,  316,  316,  316,  316,  496,  313,

      318,  318,  419,  434,  318,  318,  318,  318,  318,  318,
      318,  316,  320,  320,  320,  320,  320,  320,  320,  321,
      447,  321,  323,  323,  630,  447,  419,  496,  434,  339,
      498,  629,  321,  344,  628,  344,  437,  321,  323,  339,
      339,  339,  339,  339,  339,  627,  344,  323,  626,  437,
      625,  344,  624,  622,  341,  498,  621,  620,  339,  340,
      341,  341,  341,  341,  341,  341,  619,  616,  614,  340,
      340,  340,  340,  340,  340,  340,  610,  608,  607,  341,
      606,  340,  340,  340,  604,  600,  598,  595,  340,  594,
      588,  340,  340,  340,  340,  340,  340,  342,  586,  585,

      418,  583,  418,  342,  342,  342,  342,  342,  342,  342,
      582,  580,  579,  418,  578,  342,  342,  342,  418,  576,
      575,  573,  342,  572,  570,  342,  342,  342,  342,  342,
      342,  343,  343,  343,  343,  343,  343,  343,  413,  417,
      417,  417,  417,  417,  417,  417,  569,  567,  413,  413,
      413,  413,  413,  413,  566,  565,  564,  563,  562,  558,
      556,  554,  553,  415,  552,  551,  550,  413,  414,  415,
      415,  415,  415,  415,  415,  548,  547,  546,  414,  414,
      414,  414,  414,  414,  414,  543,  539,  538,  415,  536,
      414,  414,  414,  535,  534,  533,  532,  414,  530,  529,

      414,  414,  414,  414,  414,  414,  416,  528,  523,  522,
      519,  518,  416,  416,  416,  416,  416,  416,  416,  517,
      516,  515,  514,  513,  416,  416,  416,  510,  509,  507,
      506,  416,  505,  501,  416,  416,  416,  416,  416,  416,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  647,  647,  495,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  648,  648,
      493,  648,  492,  648,  648,  648,  648,  648,  648,  648,

      649,  649,  649,  649,  649,  649,  649,  650,  650,  491,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  651,
      651,  489,  651,  487,  651,  651,  651,  651,  651,  651,
      651,  652,  652,  652,  652,  652,  652,  652,  653,  486,
      485,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      654,  654,  654,  483,  482,  481,  480,  654,  654,  655,
      655,  655,  479,  478,  477,  475,  655,  655,  656,  656,
      656,  474,  473,  656,  657,  657,  657,  472,  471,  470,
      469,  657,  657,  658,  658,  658,  467,  466,  465,  464,
      658,  658,  659,  659,  659,  463,  462,  659,  660,  660,

      660,  461,  460,  660,  661,  661,  661,  456,  455,  661,
      662,  662,  454,  453,  662,  663,  663,  663,  452,  451,
      663,  664,  664,  664,  450,  449,  664,  665,  665,  448,
      444,  665,  666,  666,  443,  439,  666,  667,  667,  438,
      431,  667,  430,  428,  427,  426,  425,  424,  421,  412,
      411,  410,  409,  407,  406,  405,  404,  401,  400,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      376,  374,  373,  372,  371,  370,  369,  368,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  355,  353,  351,

      350,  348,  347,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  301,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  278,  277,  276,  274,  273,
      272,  270,  269,  268,  267,  265,  264,  263,  262,  261,
      260,  259,  257,  256,  255,  254,  253,  252,  251,  249,
      247,  246,  226,  223,  222,  221,  220,  218,  217,  215,
      214,  212,  187,  186,  185,  183,  182,  180,  177,  176,
      173,  171,  169,  168,  167,  166,  164,  163,  162,  161,

      158,  157,  156,  155,  154,  153,  151,  150,  149,  148,
      145,  144,  142,  141,  140,  139,  138,  137,  136,  134,
      131,  127,  111,  109,   87,   80,   79,   78,   77,   74,
       70,   69,   66,   64,   63,   57,   51,   47,   46,   44,
       37,   33,   31,   24,   23,   21,   18,   13,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[167] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
//
//====================--------------------------------------------------------------
// Eran Ifrah 2014 (c)
//====================--------------------------------------------------------------
//
// To generate a source file from this .l file, you will need
// a flex version 2.5.34 and later
// Under Windows, you will need to run the following command 
// from within *MSYS* terminal (or run codelite from an MSYS shell):
// /usr/bin/flex --noline --batch --outfile=CxxLexer.cpp CxxScanner.l
//
//====================--------------------------------------------------------------
//
extern "C" int yywrap(void*) { return 1; }

#include <wx/string.h>
#include <string>
#include <wx/filename.h>
#include "CxxLexerAPI.h"
#include "CxxScannerTokens.h"

#define YY_FATAL_ERROR(x)
#define YYSTYPE char*
#define ECHO
#define P(s) 

#define YY_NO_UNISTD_H
#define YY_USER_ACTION  yycolumn += yyleng;
#define RETURN_WHITESPACE()                                         \
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r; \
    if(userData->IsCollectingWhitespace()) {                        \
        return T_WHITESPACE;                                        \
    }
#define RETURN_NEWLINE()                                            \
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r; \
    if(userData->IsCollectingWhitespace()) {                        \
        return T_NEWLINE;                                           \
    }
    
/* regex and modes */
/* options */

#define INITIAL 0
#define PREPR 1
#define WRAP_PREP 2
#define CPP_COMMENT 3
#define C_COMMENT 4
#define INCLUDE 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 644 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 643 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PREPR):
case YY_STATE_EOF(WRAP_PREP):
case YY_STATE_EOF(CPP_COMMENT):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(INCLUDE):
{yyterminate();}
	YY_BREAK
case 1:
YY_RULE_SETUP
{ return T_ALIGNAS; }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ return T_ALIGNOF; }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return T_AND;     }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return T_AND_EQ;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return T_ASM;     }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return T_AUTO;    }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return T_BITAND;  }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return T_BITOR;   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return T_BOOL;    }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return T_BREAK;   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return T_CASE;   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return T_CATCH;} 
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return T_CHAR;} 
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return T_CHAR16_T;} 
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return T_CHAR32_T;} 
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return T_CLASS;} 
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return T_COMPL;} 
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return T_CONST;} 
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return T_CONSTEXPR;} 
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return T_CONST_CAST;} 
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return T_CONTINUE;} 
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return T_DECLTYPE;} 
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return T_DEFAULT;} 
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return T_DELETE;} 
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return T_DO;} 
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return T_DOUBLE;} 
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return T_DYNAMIC_CAST;} 
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return T_ELSE;} 
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return T_ENUM;} 
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return T_EXPLICIT;} 
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return T_EXPORT;} 
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return T_EXTERN;} 
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return T_FALSE;} 
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return T_FINAL;} 
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return T_FLOAT;} 
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return T_FOR;} 
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return T_FRIEND;} 
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return T_GOTO;} 
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return T_IF;} 
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return T_INLINE;} 
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return T_INT;} 
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return T_LONG;} 
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return T_MUTABLE;} 
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return T_NAMESPACE;} 
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return T_NEW;} 
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return T_NOEXCEPT;} 
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return T_NOT;} 
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return T_NOT_EQ;} 
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return T_NULLPTR;} 
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return T_OPERATOR;} 
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return T_OR;} 
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return T_OR_EQ;} 
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return T_OVERRIDE;} 
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return T_PRIVATE;} 
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return T_PROTECTED;} 
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return T_PUBLIC;} 
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return T_REGISTER;} 
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return T_REINTERPRET_CAST;}     
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return T_RETURN;} 
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return T_SHORT;} 
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return T_SIGNED;} 
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return T_SIZEOF;} 
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return T_STATIC;} 
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return T_STATIC_ASSERT;}  
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return T_STATIC_CAST;} 
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return T_STRUCT;} 
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return T_SWITCH;} 
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return T_TEMPLATE;} 
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return T_THIS;} 
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return T_THREAD_LOCAL;} 
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return T_THROW;} 
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return T_TRUE;} 
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return T_TRY;}
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return T_TYPEDEF;} 
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return T_TYPEID;} 
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return T_TYPENAME;} 
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return T_UNION;} 
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return T_UNSIGNED;} 
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return T_USING;} 
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return T_VIRTUAL;} 
	YY_BREAK
case 81:
YY_RULE_SETUP
{ return T_VOID;} 
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return T_VOLATILE;} 
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return T_WCHAR_T;} 
	YY_BREAK
case 84:
YY_RULE_SETUP
{ return T_WHILE;} 
	YY_BREAK
case 85:
YY_RULE_SETUP
{ return T_XOR;} 
	YY_BREAK
case 86:
YY_RULE_SETUP
{ return T_XOR_EQ;}
	YY_BREAK
case 87:
YY_RULE_SETUP
{ RETURN_WHITESPACE(); }
	YY_BREAK
case 88:
YY_RULE_SETUP
{RETURN_WHITESPACE();}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ RETURN_NEWLINE(); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ return T_DEC_NUMBER;}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ return T_OCTAL_NUMBER;}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ return T_HEX_NUMBER; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ return T_FLOAT_NUMBER;}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ return T_DOT_STAR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ return T_DOUBLE_COLONS; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ return T_ARROW; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ return T_ARROW_STAR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ return T_PLUS_PLUS; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ return T_MINUS_MINUS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ return T_LS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ return T_LE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ return T_GE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ return T_EQUAL; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ return T_NOT_EQUAL; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ return T_AND_AND;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ return T_OR_OR;}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ return T_STAR_EQUAL;}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ return T_SLASH_EQUAL;}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ return T_DIV_EQUAL;}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ return T_PLUS_EQUAL;}
	YY_BREAK
case 111:
YY_RULE_SETUP
{ return T_MINUS_EQUAL;}
	YY_BREAK
case 112:
YY_RULE_SETUP
{ return T_LS_ASSIGN;}
	YY_BREAK
case 113:
YY_RULE_SETUP
{ return T_RS_ASSIGN;}
	YY_BREAK
case 114:
YY_RULE_SETUP
{ return T_AND_EQUAL;}
	YY_BREAK
case 115:
YY_RULE_SETUP
{ return T_POW_EQUAL;}
	YY_BREAK
case 116:
YY_RULE_SETUP
{ return T_OR_EQUAL;}
	YY_BREAK
case 117:
YY_RULE_SETUP
{ return T_3_DOTS;}
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    return T_STRING;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    return T_STRING;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    // Clear the comment collected
    BEGIN C_COMMENT;
    
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->ClearComment();
        userData->AppendToComment("/*");
        userData->SetCommentStartLine(yylineno);
    }
}
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment("*/");
        userData->SetCommentEndLine(yylineno);
    }
    BEGIN INITIAL;
    if(userData->IsCollectingComments()) {
        return T_C_COMMENT;
    }
}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{ 
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment("\n");
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment(yytext[0]);
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    int oldState = yyg->yy_start;
    BEGIN CPP_COMMENT;
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->ClearComment();
        userData->AppendToComment("//");
        userData->SetCommentStartLine(yylineno);
    }
    if((1 + 2 * PREPR) == oldState) {
        return T_PP_STATE_EXIT;
    }
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{ 
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment("\\\n");
    } 
}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{ 
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment("\\\r\n");
    } 
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{
    BEGIN INITIAL;
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment("\n");
        return T_CXX_COMMENT;
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
{ 
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment(yytext[0]);
    }
}
	YY_BREAK
case 129:
YY_RULE_SETUP
{ 
    return T_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ 
    BEGIN(PREPR);
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    userData->SetPreProcessorSection(true);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
{ 
    return yytext[0];
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
    /* keep the current state */ 
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
    /* keep the current state */ 
}
	YY_BREAK
case 134:
YY_RULE_SETUP
{
    /* do nothing */
    RETURN_WHITESPACE();
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{ 
    BEGIN(INITIAL);
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    userData->SetPreProcessorSection(false);
    return T_PP_STATE_EXIT;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
{ 
    return T_PP_DEFINE;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ 
    return T_PP_DEFINED;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ 
    return T_PP_IF;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
{ 
    return T_PP_IFDEF;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
{
    return T_PP_IFNDEF;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
{ 
    return T_PP_ELSE;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
{ 
    return T_PP_ELIF;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
{ 
    return T_PP_ENDIF;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
{ 
    return T_PP_LINE;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
{ 
    return T_PP_PRAGMA;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
{ 
    return T_PP_UNDEF;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
{ 
    return T_PP_ERROR;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
{ 
    return T_PP_AND;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
{ 
    return T_PP_OR;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
{ 
    return T_PP_GT;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
{ 
    return T_PP_GTEQ;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
{ 
    return T_PP_LT;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
{ 
    return T_PP_LTEQ;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
{ 
    BEGIN(INCLUDE);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
{
    return T_PP_STRING;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
{
    return T_PP_STRING;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
{ return T_PP_DEC_NUMBER;}
	YY_BREAK
case 158:
YY_RULE_SETUP
{ return T_PP_OCTAL_NUMBER;}
	YY_BREAK
case 159:
YY_RULE_SETUP
{ return T_PP_HEX_NUMBER; }
	YY_BREAK
case 160:
YY_RULE_SETUP
{ return T_PP_FLOAT_NUMBER;}
	YY_BREAK
case 161:
YY_RULE_SETUP
{ 
    return T_PP_IDENTIFIER;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
{ 
    return yytext[0];
}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
    userData->SetPreProcessorSection(false);
    return T_PP_STATE_EXIT;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
{ RETURN_WHITESPACE(); }
	YY_BREAK
case 165:
YY_RULE_SETUP
{ /* got the include file name */
    return T_PP_INCLUDE_FILENAME;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 644 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 644 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 643);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

//=============-------------------------------
// API methods implementation
//=============-------------------------------

void* LexerNew(const wxString& content, size_t options )
{
    yyscan_t scanner;
    yylex_init(&scanner);
    struct yyguts_t * yyg = (struct yyguts_t*)scanner;
    CppLexerUserData *userData = new CppLexerUserData(options);
    
    // keep the file pointer (and make sure we close it at the end)
    userData->SetCurrentPF(NULL);
    yyg->yyextra_r = userData;
    
    wxCharBuffer cb = content.mb_str(wxConvUTF8);
    yy_switch_to_buffer(yy_scan_string(cb.data(),scanner),scanner);
    yycolumn = 1;
    return scanner;
}

void* LexerNew(const wxFileName& filename, size_t options )
{
    wxFileName fn = filename;
    if(fn.IsRelative()) {
        fn.MakeAbsolute();
    }
    
    FILE* fp = ::fopen(fn.GetFullPath().mb_str(wxConvUTF8).data(), "rb");
    if(!fp) {
        return NULL;
    }
    yyscan_t scanner;
    yylex_init(&scanner);
    struct yyguts_t * yyg = (struct yyguts_t*)scanner;
    CppLexerUserData *userData = new CppLexerUserData(options);
    
    // keep the file pointer (and make sure we close it at the end)
    userData->SetCurrentPF(fp);
    yyg->yyextra_r = userData;
    
    yy_switch_to_buffer(yy_create_buffer(fp,YY_BUF_SIZE,scanner),scanner);
    yycolumn = 1;
    return scanner;
}

void LexerDestroy(void** scanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)(*scanner);
    delete (CppLexerUserData*)yyg->yyextra_r;
    yy_delete_buffer(YY_CURRENT_BUFFER,*scanner);

    yylex_destroy(*scanner);
    *scanner = NULL;
}

void LexerUnget(void* scanner)
{
    // return the entire token back to the input stream
    struct yyguts_t * yyg = (struct yyguts_t*)scanner;
    yyless(0);
}

bool LexerNext(void* scanner, CxxLexerToken& token)
{
    token.SetColumn(0);
    token.SetType(yylex(scanner));
    if(!token.IsEOF()) {
        struct yyguts_t * yyg = (struct yyguts_t*)scanner;
        CppLexerUserData* userData = (CppLexerUserData*)yyg->yyextra_r;
        switch(token.GetType()) {
        case T_CXX_COMMENT:
            // One line up for CXX comments
            token.SetLineNumber(userData->GetCommentStartLine());
            token.SetComment(userData->GetComment());
            userData->ClearComment();
            break;
        case T_C_COMMENT:
            token.SetComment(userData->GetComment());
            userData->ClearComment();
            token.SetLineNumber(userData->GetCommentStartLine());
            break;
        default:
            token.SetLineNumber(yylineno);
            token.SetText(yytext);
            token.SetColumn(yycolumn);
            break;
        }

    } else {
        token.SetText(NULL);
        token.SetLineNumber(0);
        token.SetColumn(0);
    }
    return !token.IsEOF();
}

wxString LexerCurrentToken(void* scanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)scanner;
    return yytext;
}

CppLexerUserData* LexerGetUserData(void* scanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)scanner;
    return (CppLexerUserData*) yyg->yyextra_r;
}

