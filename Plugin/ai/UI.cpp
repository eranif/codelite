//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: UI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "UI.hpp"

// Declare the bitmap loading function
extern void wxCF667InitBitmapResources();

namespace
{
// return the wxBORDER_SIMPLE that matches the current application theme
[[maybe_unused]]
wxBorder get_border_simple_theme_aware_bit()
{
#if wxVERSION_NUMBER >= 3300 && defined(__WXMSW__)
    return wxSystemSettings::GetAppearance().IsDark() ? wxBORDER_SIMPLE : wxBORDER_DEFAULT;
#else
    return wxBORDER_DEFAULT;
#endif
} // get_border_simple_theme_aware_bit
bool bBitmapLoaded = false;
} // namespace

AssistanceAIChatWindowBase::AssistanceAIChatWindowBase(
    wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if (!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCF667InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(mainSizer);

    m_mainSplitter = new wxSplitterWindow(
        this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxSP_LIVE_UPDATE | wxSP_3DSASH);
    m_mainSplitter->SetSashGravity(1);
    m_mainSplitter->SetMinimumPaneSize(150);

    mainSizer->Add(m_mainSplitter, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_splitterPageTop = new wxPanel(
        m_mainSplitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainSplitter, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    wxBoxSizer* boxSizer35 = new wxBoxSizer(wxVERTICAL);
    m_splitterPageTop->SetSizer(boxSizer35);

    m_stcOutput = new clThemedSTC(
        m_splitterPageTop, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageTop, wxSize(700, 500)), 0);
    // Configure the fold margin
    m_stcOutput->SetMarginType(4, wxSTC_MARGIN_SYMBOL);
    m_stcOutput->SetMarginMask(4, wxSTC_MASK_FOLDERS);
    m_stcOutput->SetMarginSensitive(4, true);
    m_stcOutput->SetMarginWidth(4, 0);

    // Configure the tracker margin
    m_stcOutput->SetMarginWidth(1, 0);

    // Configure the symbol margin
    m_stcOutput->SetMarginType(2, wxSTC_MARGIN_SYMBOL);
    m_stcOutput->SetMarginMask(2, ~(wxSTC_MASK_FOLDERS));
    m_stcOutput->SetMarginWidth(2, 0);
    m_stcOutput->SetMarginSensitive(2, true);

    // Configure the line numbers margin
    m_stcOutput->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcOutput->SetMarginWidth(0, 0);

    // Configure the line symbol margin
    m_stcOutput->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcOutput->SetMarginMask(3, 0);
    m_stcOutput->SetMarginWidth(3, 0);
    // Select the lexer
    m_stcOutput->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_stcOutput->StyleClearAll();
    m_stcOutput->SetWrapMode(1);
    m_stcOutput->SetIndentationGuides(0);
    m_stcOutput->SetEOLMode(2);
    m_stcOutput->SetKeyWords(0, wxT(""));
    m_stcOutput->SetKeyWords(1, wxT(""));
    m_stcOutput->SetKeyWords(2, wxT(""));
    m_stcOutput->SetKeyWords(3, wxT(""));
    m_stcOutput->SetKeyWords(4, wxT(""));

    boxSizer35->Add(m_stcOutput, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_splitterPageBottom = new wxPanel(
        m_mainSplitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainSplitter, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_mainSplitter->SplitHorizontally(m_splitterPageTop, m_splitterPageBottom, 200);

    wxBoxSizer* boxSizer43 = new wxBoxSizer(wxVERTICAL);
    m_splitterPageBottom->SetSizer(boxSizer43);

    m_toolbar = new wxAuiToolBar(m_splitterPageBottom,
                                 wxID_ANY,
                                 wxDefaultPosition,
                                 wxDLG_UNIT(m_splitterPageBottom, wxSize(-1, -1)),
                                 wxAUI_TB_PLAIN_BACKGROUND | wxAUI_TB_DEFAULT_STYLE);
    m_toolbar->SetToolBitmapSize(wxSize(16, 16));

    boxSizer43->Add(m_toolbar, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_stcInput = new clThemedSTC(
        m_splitterPageBottom, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageBottom, wxSize(-1, -1)), 0);
    m_stcInput->SetToolTip(_("Use Shift-ENTER to submit"));
    m_stcInput->SetFocus();
    // Configure the fold margin
    m_stcInput->SetMarginType(4, wxSTC_MARGIN_SYMBOL);
    m_stcInput->SetMarginMask(4, wxSTC_MASK_FOLDERS);
    m_stcInput->SetMarginSensitive(4, true);
    m_stcInput->SetMarginWidth(4, 0);

    // Configure the tracker margin
    m_stcInput->SetMarginWidth(1, 0);

    // Configure the symbol margin
    m_stcInput->SetMarginType(2, wxSTC_MARGIN_SYMBOL);
    m_stcInput->SetMarginMask(2, ~(wxSTC_MASK_FOLDERS));
    m_stcInput->SetMarginWidth(2, 0);
    m_stcInput->SetMarginSensitive(2, true);

    // Configure the line numbers margin
    m_stcInput->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcInput->SetMarginWidth(0, 0);

    // Configure the line symbol margin
    m_stcInput->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcInput->SetMarginMask(3, 0);
    m_stcInput->SetMarginWidth(3, 0);
    // Select the lexer
    m_stcInput->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_stcInput->StyleClearAll();
    m_stcInput->SetWrapMode(1);
    m_stcInput->SetIndentationGuides(0);
    m_stcInput->SetEOLMode(2);
    m_stcInput->SetKeyWords(0, wxT(""));
    m_stcInput->SetKeyWords(1, wxT(""));
    m_stcInput->SetKeyWords(2, wxT(""));
    m_stcInput->SetKeyWords(3, wxT(""));
    m_stcInput->SetKeyWords(4, wxT(""));

    boxSizer43->Add(m_stcInput, 1, wxEXPAND, WXC_FROM_DIP(5));

    SetName(wxT("AssistanceAIChatWindowBase"));
    SetMinClientSize(wxSize(800, 600));
    SetSize(wxDLG_UNIT(this, wxSize(800, 600)));
    if (GetSizer()) {
        GetSizer()->Fit(this);
    }
    // Connect events
    m_stcInput->Bind(wxEVT_UPDATE_UI, &AssistanceAIChatWindowBase::OnInputUI, this);
}

AssistanceAIChatWindowBase::~AssistanceAIChatWindowBase()
{
    m_stcInput->Unbind(wxEVT_UPDATE_UI, &AssistanceAIChatWindowBase::OnInputUI, this);
}

ChatAIWindowFrameBase::ChatAIWindowFrameBase(
    wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if (!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCF667InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(mainSizer);

    SetName(wxT("ChatAIWindowFrameBase"));
    SetMinClientSize(wxSize(800, 600));
    SetSize(wxDLG_UNIT(this, wxSize(800, 600)));
    if (GetSizer()) {
        GetSizer()->Fit(this);
    }
    if (GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    if (!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    this->Bind(wxEVT_CLOSE_WINDOW, &ChatAIWindowFrameBase::OnClose, this);
}

ChatAIWindowFrameBase::~ChatAIWindowFrameBase()
{
    this->Unbind(wxEVT_CLOSE_WINDOW, &ChatAIWindowFrameBase::OnClose, this);
}

NewLLMEndpointWizardBase::NewLLMEndpointWizardBase(
    wxWindow* parent, wxWindowID id, const wxString& title, const wxBitmap& bmp, const wxPoint& pos, long style)
{
    if (!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCF667InitBitmapResources();
        bBitmapLoaded = true;
    }
    Create(parent, id, title, wxNullBitmap, pos, style);

    m_wizardPageSettings = new wxWizardPageSimple(this, NULL, NULL, wxNullBitmap);
    m_pages.push_back(m_wizardPageSettings);

    wxBoxSizer* boxSizer62 = new wxBoxSizer(wxVERTICAL);
    m_wizardPageSettings->SetSizer(boxSizer62);

    m_banner108 = new wxBannerWindow(m_wizardPageSettings,
                                     wxID_ANY,
                                     wxTOP,
                                     wxDefaultPosition,
                                     wxDLG_UNIT(m_wizardPageSettings, wxSize(-1, -1)),
                                     wxBORDER_THEME);
    m_banner108->SetBitmap(wxNullBitmap);
    m_banner108->SetText(_("General Setings"), wxT(""));
    m_banner108->SetGradient(
        wxSystemSettings::GetColour(wxSYS_COLOUR_MENU), wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));

    boxSizer62->Add(m_banner108, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer68 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer68->SetFlexibleDirection(wxBOTH);
    flexGridSizer68->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer68->AddGrowableCol(1);

    boxSizer62->Add(flexGridSizer68, 1, wxALL | wxEXPAND, WXC_FROM_DIP(10));

    m_staticText69 = new wxStaticText(m_wizardPageSettings,
                                      wxID_ANY,
                                      _("API Provider:"),
                                      wxDefaultPosition,
                                      wxDLG_UNIT(m_wizardPageSettings, wxSize(-1, -1)),
                                      0);

    flexGridSizer68->Add(m_staticText69, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceProvidersArr;
    m_choiceProvidersArr.Add(_("Ollama (Local)"));
    m_choiceProvidersArr.Add(_("Ollama (Cloud)"));
    m_choiceProvidersArr.Add(_("Anthropic"));
    m_choiceProviders = new wxChoice(m_wizardPageSettings,
                                     wxID_ANY,
                                     wxDefaultPosition,
                                     wxDLG_UNIT(m_wizardPageSettings, wxSize(-1, -1)),
                                     m_choiceProvidersArr,
                                     0);
    m_choiceProviders->SetSelection(0);

    flexGridSizer68->Add(m_choiceProviders, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText72 = new wxStaticText(m_wizardPageSettings,
                                      wxID_ANY,
                                      _("Base URL:"),
                                      wxDefaultPosition,
                                      wxDLG_UNIT(m_wizardPageSettings, wxSize(-1, -1)),
                                      0);

    flexGridSizer68->Add(m_staticText72, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlBaseURL = new wxTextCtrl(m_wizardPageSettings,
                                       wxID_ANY,
                                       wxT(""),
                                       wxDefaultPosition,
                                       wxDLG_UNIT(m_wizardPageSettings, wxSize(250, -1)),
                                       0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlBaseURL->SetHint(wxT(""));
#endif

    flexGridSizer68->Add(m_textCtrlBaseURL, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText76 = new wxStaticText(m_wizardPageSettings,
                                      wxID_ANY,
                                      _("Model:"),
                                      wxDefaultPosition,
                                      wxDLG_UNIT(m_wizardPageSettings, wxSize(-1, -1)),
                                      0);

    flexGridSizer68->Add(m_staticText76, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlModel = new wxTextCtrl(m_wizardPageSettings,
                                     wxID_ANY,
                                     wxT(""),
                                     wxDefaultPosition,
                                     wxDLG_UNIT(m_wizardPageSettings, wxSize(-1, -1)),
                                     0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlModel->SetHint(wxT(""));
#endif

    flexGridSizer68->Add(m_textCtrlModel, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText78 = new wxStaticText(m_wizardPageSettings,
                                      wxID_ANY,
                                      _("Model Context Window (KB):"),
                                      wxDefaultPosition,
                                      wxDLG_UNIT(m_wizardPageSettings, wxSize(-1, -1)),
                                      0);

    flexGridSizer68->Add(m_staticText78, 0, wxALL, WXC_FROM_DIP(5));

    m_spinCtrlContextSizeKB = new wxSpinCtrl(m_wizardPageSettings,
                                             wxID_ANY,
                                             wxT("32"),
                                             wxDefaultPosition,
                                             wxDLG_UNIT(m_wizardPageSettings, wxSize(-1, -1)),
                                             wxSP_ARROW_KEYS);
    m_spinCtrlContextSizeKB->SetToolTip(_("The model context size, in kilobytes."));
    m_spinCtrlContextSizeKB->SetRange(4, 1000);
    m_spinCtrlContextSizeKB->SetValue(32);

    flexGridSizer68->Add(m_spinCtrlContextSizeKB, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_wizardPageAPI = new wxWizardPageSimple(this, NULL, NULL, wxNullBitmap);
    m_pages.push_back(m_wizardPageAPI);
    if (m_pages.size() > 1) {
        for (size_t i = 1; i < m_pages.size(); i++) { wxWizardPageSimple::Chain(m_pages.at(i - 1), m_pages.at(i)); }
    }
    GetPageAreaSizer()->Add(m_pages.at(0));

    wxBoxSizer* boxSizer111 = new wxBoxSizer(wxVERTICAL);
    m_wizardPageAPI->SetSizer(boxSizer111);

    m_banner112 = new wxBannerWindow(m_wizardPageAPI,
                                     wxID_ANY,
                                     wxTOP,
                                     wxDefaultPosition,
                                     wxDLG_UNIT(m_wizardPageAPI, wxSize(-1, -1)),
                                     wxBORDER_THEME);
    m_banner112->SetBitmap(wxNullBitmap);
    m_banner112->SetText(_("API Token"), wxT(""));
    m_banner112->SetGradient(
        wxSystemSettings::GetColour(wxSYS_COLOUR_MENU), wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));

    boxSizer111->Add(m_banner112, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxFlexGridSizer* flexGridSizer113 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer113->SetFlexibleDirection(wxBOTH);
    flexGridSizer113->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_SPECIFIED);
    flexGridSizer113->AddGrowableCol(1);

    boxSizer111->Add(flexGridSizer113, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText114 = new wxStaticText(
        m_wizardPageAPI, wxID_ANY, _("API Key:"), wxDefaultPosition, wxDLG_UNIT(m_wizardPageAPI, wxSize(-1, -1)), 0);

    flexGridSizer113->Add(m_staticText114, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlAPIKey = new wxTextCtrl(m_wizardPageAPI,
                                      wxID_ANY,
                                      wxT(""),
                                      wxDefaultPosition,
                                      wxDLG_UNIT(m_wizardPageAPI, wxSize(-1, -1)),
                                      wxTE_PASSWORD);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlAPIKey->SetHint(wxT(""));
#endif

    flexGridSizer113->Add(m_textCtrlAPIKey, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    SetName(wxT("NewLLMEndpointWizardBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if (GetSizer()) {
        GetSizer()->Fit(this);
    }
    if (GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    if (!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    this->Bind(wxEVT_WIZARD_PAGE_CHANGING, &NewLLMEndpointWizardBase::OnPageChanging, this);
    this->Bind(wxEVT_WIZARD_FINISHED, &NewLLMEndpointWizardBase::OnFinished, this);
    m_choiceProviders->Bind(wxEVT_COMMAND_CHOICE_SELECTED, &NewLLMEndpointWizardBase::OnProviderChanged, this);
    m_staticText78->Bind(wxEVT_UPDATE_UI, &NewLLMEndpointWizardBase::OnContextSizeUI, this);
    m_spinCtrlContextSizeKB->Bind(wxEVT_UPDATE_UI, &NewLLMEndpointWizardBase::OnContextSizeUI, this);
}

NewLLMEndpointWizardBase::~NewLLMEndpointWizardBase()
{
    this->Unbind(wxEVT_WIZARD_PAGE_CHANGING, &NewLLMEndpointWizardBase::OnPageChanging, this);
    this->Unbind(wxEVT_WIZARD_FINISHED, &NewLLMEndpointWizardBase::OnFinished, this);
    m_choiceProviders->Unbind(wxEVT_COMMAND_CHOICE_SELECTED, &NewLLMEndpointWizardBase::OnProviderChanged, this);
    m_staticText78->Unbind(wxEVT_UPDATE_UI, &NewLLMEndpointWizardBase::OnContextSizeUI, this);
    m_spinCtrlContextSizeKB->Unbind(wxEVT_UPDATE_UI, &NewLLMEndpointWizardBase::OnContextSizeUI, this);
}
